{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"lastversion \u00a4 English | \u7b80\u4f53\u4e2d\u6587 A tiny command-line utility that helps to answer a simple question: What is the latest stable version for a project? ... and, optionally, download/install it. lastversion allows finding well-formatted, the latest release version of a project from these supported locations: GitHub GitLab BitBucket PyPI Mercurial SourceForge Wikipedia Arbitrary software sites which publish releases in RSS/ATOM feeds Why you need lastversion \u00a4 In general, quite many project authors complicate finding the latest version by: Creating a formal release that is clearly a Release Candidate ( rc in tag), but forgetting to mark it as a pre-release Putting extraneous text in release tag e.g. release-1.2.3 or name-1.2.3-2019 anything fancy like that Putting or not putting the v prefix inside release tags. Today yes, tomorrow not. I'm not consistent about it myself :) Switching from one version format to another, e.g. v20150121 to v2.0.1 There is no consistency in human beings. To deal with all this mess and simply get a well-formatted, last stable version (or download URL!) on the command line, you can use lastversion . Its primary use is for build systems - whenever you want to watch specific projects for released versions to build packages automatically. Or otherwise require getting the latest version in your automation scripts. Like I do lastversion does a little bit of AI to detect if releasers mistakenly filed a beta version as a stable release. It incorporates logic for cleaning up human inconsistency from version information. Synopsis \u00a4 lastversion apache/incubator-pagespeed-ngx #> 1.13.35.2 lastversion download apache/incubator-pagespeed-ngx #> downloaded incubator-pagespeed-ngx-v1.13.35.2-stable.tar.gz lastversion download apache/incubator-pagespeed-ngx -o pagespeed.tar.gz #> downloads with chosen filename lastversion https://transmissionbt.com/ #> 3.0 lastversion format \"mysqld Ver 5.6.51-91.0 for Linux\" #> 5.6.51 Installation for RPM-based systems \u00a4 Supported: CentOS/RHEL 7, 8, 9 including clones like AlmaLinux and Rocky Linux Amazon Linux 2 Fedora Linux sudo yum -y install https://extras.getpagespeed.com/release-latest.rpm sudo yum -y install lastversion Installation for other systems \u00a4 Installing with pip is easiest: pip install lastversion Usage \u00a4 Typically, you would just pass a repository URL (or repo owner/name to it) as the only argument, e.g.: lastversion https://github.com/gperftools/gperftools Equivalently accepted invocation with the same output is: lastversion gperftools/gperftools If you're lazy to even copy-paste a project's URL, you can just type its name as argument, which will use repository search API (slower). Helps to answer what is the latest Linux version: lastversion linux Or wondering what is the latest version of WordPress? lastversion wordpress A special value of self for the main argument, will look up the last release of lastversion itself. For more options to control output or behavior, see --help output: usage: lastversion [-h] [--pre] [--sem {major,minor,patch,any}] [-v] [-d [FILENAME]] [--format {version,assets,source,json,tag}] [--assets] [--source] [-gt VER] [-b MAJOR] [--only REGEX] [--exclude REGEX] [--filter REGEX] [--having-asset [ASSET]] [-su] [--even] [--at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local,helm_chart,wiki,system,wp,gitea}] [-y] [--version] [{get,download,extract,unzip,test,format,install,update-spec}] <repo URL or string> Find the latest software release. positional arguments: {get,download,extract,unzip,test,format,install,update-spec} Action to run. Default: get <repo URL or string> Repository in format owner/name or any URL that belongs to it, or a version string optional arguments: -h, --help show this help message and exit --pre Include pre-releases in potential versions --sem {major,minor,patch,any} Semantic versioning level base to print or compare against -v, --verbose Will give you an idea of what is happening under the hood, -vv to increase verbosity level -d [FILENAME], -o [FILENAME], --download [FILENAME], --output [FILENAME] Download with custom filename --format {version,assets,source,json,tag} Output format --assets Returns assets download URLs for last release --source Returns only source URL for last release -gt VER, --newer-than VER Output only if last version is newer than given version -b MAJOR, --major MAJOR, --branch MAJOR Only consider releases of a specific major version, e.g. 2.1.x --only REGEX Only consider releases containing this text. Useful for repos with multiple projects inside --exclude REGEX Only consider releases NOT containing this text. Useful for repos with multiple projects inside --even Only even versions like 1.[2].x, or 3.[6].x are considered as stable --filter REGEX Filters --assets result by a regular expression --having-asset [ASSET] Only consider releases with this asset -su, --shorter-urls A tiny bit shorter URLs produced --at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local,helm_chart,wiki,system,wp,gitea} If the repo argument is one word, specifies where to look up the project. The default is via internal lookup or GitHub Search -y, --assumeyes Automatically answer yes for all questions --version show program's version number and exit The --format will affect what kind of information from the last release and in which format will be displayed, e.g.: version is the default. Simply outputs well-formatted version number of the latest release assets will output a newline-separated list of assets URLs (if any), otherwise link to sources archive source will output link to source archive, no matter if the release has some assets added json can be used by external Python modules or for debugging, it is dict/JSON output of an API call that satisfied last version checks tag will emit just the latest release's tag name, which useful if you're constructing download URL yourself or need the tag name otherwise An asset is a downloadable file that typically represents an executable, or otherwise \"ready to launch\" project. It's what you see filed under formal releases, and is usually a compiled (for specific platform), program. Source files, are either tarballs or zipballs of sources for the source code of release. You can display either assets or source URLs of the latest release, by passing the corresponding --format flag , e.g. --format source You also simply pass --source instead of --format source , and --assets instead of --format assets , as in: lastversion --assets mautic/mautic #> https://github.com/mautic/mautic/archive/2.15.1/mautic-2.15.1.tar.gz By default, lastversion filters output of --assets to be OS-specific. Who needs .exe on Linux? To override this behavior, you can use --filter , which has a regular expression as its argument. To disable OS filtering, use --filter . , this will match everything. You can naturally use --filter in place where you would use grep , e.g. lastversion --assets --filter win REPO Use case: Work with a multi-project repository \u00a4 Sometimes a single repository actually hosts many components, and creates releases that have separate version line for each component. To help lastversion get a component's version for such repos, use --only and --exclude switches. They make lastversion look at only those releases which are tagged (or not) with specified strings. Example : lastversion --only chart https://github.com/lastversion-test-repos/autoscaler The above will report 9.16.0 . lastversion --exclude chart https://github.com/lastversion-test-repos/autoscaler The above will report a non-chart latest version, 1.23.0 . Useful for hard cases, you can pass in regular expressions for both arguments, by prepending them with tilde, like so: lastversion --only '~-po.-' https://github.com/lastversion-test-repos/autoscaler The above will consider only releases tagged with -po d -, or -po v -, etc. Use case: How to download the latest version of something \u00a4 You can also use lastversion to download assets/sources for the latest release. Download the most recent Mautic source release: lastversion download mautic/mautic Customize downloaded filename (works only for sources, which is the default): lastversion download mautic/mautic -o mautic.tar.gz You can also directly fetch and extract the latest release's file into the current working directory by using extract command: lastversion extract wordpress You can have lastversion output sources/assets URLs and have those downloaded by something else: wget $( lastversion --assets mautic/mautic ) This will download all assets of the newest stable Mautic, which are 2 zip files. How this works: lastversion outputs all asset URLs, each on a new line, and wget is smart enough to download each URL. Magic :) For releases that have no assets added, it will download the source archive. To always download source, use --source instead: wget $( lastversion --source mautic/mautic ) Use case: Download specific asset under specified filename \u00a4 If you want to download specific asset of the last version's release and save the downloaded file under a desired name, combine -d option (for download name) and --filter for specifying assets filter. Example: lastversion --pre Aircoookie/WLED --format assets --filter ESP32.bin -d ESP32.bin Use case: Get the last version (betas are fine) \u00a4 We consider the latest release is the one that is stable / not marked as beta. If you think otherwise, then pass --pre switch and if the latest version of repository is a pre-release, then you'll get its version instead: lastversion --pre mautic/mautic #> 2.15.2b0 Use case: version of a specific branch \u00a4 For some projects, there may be several stable releases available simultaneously, in different branches. An obvious example is PHP. You can use --major flag to specify the major release version to match with, to help you find the latest stable release of a branch, like so: lastversion php/php-src --major 7 .2 This will give you current stable version of PHP 7.2.x, e.g. 7.2.28 . Branch selector is easy to be specified after semicolon, and together with the search API, a clean invocation for the same would be: lastversion php:7.2 The branch selector can also be used to get specific release details, e.g.: lastversion php:7.2.33 --assets Use case: releases with specific assets \u00a4 Sometimes a project makes nice formal releases but delay in uploading assets for releases. And you might be interested in specific asset type always. Then you can make lastversion consider as latest only the last release with specific asset name. Easy with the --having-asset switch: lastversion telegramdesktop/tdesktop --having-asset \"Linux 64 bit: Binary\" The argument value to --having-asset can be made as regular expression. For this, prepend it with tilde sign. E.g. to get releases with macOS installers: lastversion telegramdesktop/tdesktop --having-asset \"~\\.dmg $ \" You can pass no value to --having-asset at all. Then lastversion will only return the latest release which has any assets added to it: lastversion telegramdesktop/tdesktop --having-asset Use case: version of an operating system \u00a4 The operating systems are usually not versioned through GitHub releases or such. It is a challenge to get the last stable version of an OS other than from its website, or other announcement channels. An easy compromise that lastversion does about this, is hard coding well-known OS names, and using Wikipedia behind the scenes: lastversion rocky #> 8.4 lastversion windows #> 10.0.19043.1081 lastversion ios #> 14.6 You can supply a fully-qualified URL to a Wikipedia page for an OS/software project to get version from there, e.g.: lastversion https://en.wikipedia.org/wiki/Rocky_Linux #> 8.4 Special use case: NGINX stable vs mainline branch version \u00a4 lastversion https://nginx.org --major stable #> 1.16.1 lastversion https://nginx.org --major mainline #> 1.17.9 Behind the scenes, this checks with hg.nginx.org which is a Mercurial web repo. Those are supported as well, e.g. lastversion https://hg.example.com/project/ Mercurial repositories are rather rare these days, but support has been added primarily for NGINX. Special use case: find the release of a PyPI project \u00a4 Most Python libraries/apps are hosted on PyPI. To check versions of a project on PyPI, you can use: lastversion https://pypi.org/project/requests/ If you prefer using a shorter repo name, ensure --at pip switch, like so: lastversion requests --at pip Install an RPM asset \u00a4 If a project provides .rpm assets and your system has yum or dnf , you can install the project's RPM directly, like so: sudo lastversion install mailspring This finds MailSpring , gets its latest release info, filters assets for .rpm and passes it to yum / dnf . You can even set up an auto-updater cron job which will ensure you are on the latest version of a package, like so: @daily /usr/bin/lastversion install mailspring -y 2 >/dev/null If the Mailspring GitHub repo posts a release with newer .rpm , then it will be automatically installed, making sure you are running the latest and greatest Mailspring version. You'll even get an email alert after update (standard cron feature). Needless to say, more often than not such RPM packages have no idea about all potentially missing dependencies. Thus, only use lastversion install ... if the software is missing from the base yum repositories. Install an AppImage \u00a4 If a project provides .AppImage , you can install those directly using lastversion . The AppImage is self-contained Linux executable file. What lastversion does for you, is fetch the latest release's AppImage , installs it under ~/Applications/<app> and makes it executable. Just run: lastversion install fluent-reader Test version parser \u00a4 The test command can be used for troubleshooting or simply well formatting a string with version: lastversion test 'blah-1.2.3-devel' # > 1.2.3.dev0 lastversion test '1.2.x' # > False (no clear version) lastversion test '1.2.3-rc1' # > 1.2.3rc1 Scripting with lastversion in bash \u00a4 Semantic versioning support \u00a4 Sometimes you only want to check updates for a specific semantic versioning level. Does a project have a new minor release? Does a project have a new major release? To print just the necessary semantic versioning base, use --sem option. Acceptable values are major , minor , and patch . lastversion wordpress --sem major #> 5 lastversion wordpress --sem minor #> 5.9 lastversion wordpress --sem patch #> 5.9.3 The value --sem patch can be used to normalize a given result to semantic versioning, if a project doesn't follow the semantics strictly. E.g. sometimes WordPress would publish an x.y release while it's implicitly x.y.0. So let's say WordPress released \"5.10\": lastversion wordpress --sem patch #> 5.10.0 Format any version string \u00a4 Say you ran mysqld --version and got this output: mysqld Ver 5.6.51-91.0 for Linux on x86_64 (Percona Server (GPL), Release 91.0, Revision b59139e) This is rather hard to parse in bash if you want to just extract the major MySQL server version. lastversion can easily parse out and give the desired information based on desired semantic versioning level: lastversion --sem major format \"mysqld Ver 5.6.51-91.0 for Linux on x86_64 (Percona Server (GPL) , Release 91.0, Revision b59139e)\" #> 5 Compare arbitrary versions \u00a4 Use lastversion for easy comparison of versions on the command line. Compare two versions, the command will output the highest version: lastversion 1 .2.3 -gt 1 .2.4 #> 1.2.4 See exit codes below, to find whether the first argument is a higher version, or the second. The --sem option described earlier will affect both what's being printed and what semantic versioning base level is being compared, thus the result. Check for NEW release \u00a4 When you're building some upstream package, and you did this before, there is a known \"last build\" version. Automatic builds become easy with: CURRENTLY_BUILT_VER = 1 .2.3 # stored somewhere, e.g. spec file in my case LASTVER = $( lastversion repo/owner -gt ${ CURRENTLY_BUILT_VER } ) if [[ $? -eq 0 ]] ; then # LASTVER is newer, update and trigger build # .... fi Here, the -gt is actually a switch passed to lastversion , which acts in a similar fashion to -gt comparison in bash. There is more to it, if you want to make this reliable. See my ranting on RPM auto-builds with lastversion Check if there is a newer kernel for your Linux machine \u00a4 LATEST_KERNEL = $( lastversion linux -gt $( uname -r | cut -d '-' -f 1 )) if [[ $? -eq 0 ]] ; then echo \"I better update my kernel now, because ${ LATEST_KERNEL } is there\" else echo \"My kernel is latest and greatest.\" fi Exit Status codes \u00a4 Exit status codes are the usual means of communicating a command's execution success or failure. So lastversion follows this: successful command returns 0 while anything else is an error of some kind: Exit status code 1 is returned for cases like no release tag existing for repository at all, or repository does not exist. Exit status code 2 is returned for -gt version comparison negative lookup. Exit status code 3 is returned when filtering assets of last release yields empty URL set (no match) Tips \u00a4 Getting the latest version is heavy on the API, because GitHub does not allow to fetch tags in chronological order, and some repositories switch from one version format to another, so we can't just consider the highest version to be latest . We have to fetch every tag's commit date, and see if it's actually more recent. Thus, it's slower with larger repositories, which have potentially a lot of tags. Thus, lastversion makes use of caching API response to be fast and light on GitHub API, It does conditional ETag validation, which, as per GitHub API will not count towards rate limit. The cache is stored in ~/.cache/lastversion on Linux systems. It is much recommended to set up your GitHub API token . Bare API token is enough, you may deselect all permissions. You can then increase your rate limit by adding the following ~/.bashrc file: export GITHUB_API_TOKEN = xxxxxxxxxxxxxxx You can use either GITHUB_API_TOKEN or GITHUB_TOKEN environment variable. The former has priority. For GitLab, you can use a Personal Access Token : export GITLAB_PA_TOKEN = xxxxxxxxxxxxxxx Then run source ~/.bashrc . After this, lastversion will use it to get larger API calls allowance from GitHub. Usage in a Python module \u00a4 You can use lastversion.has_update(...) to find whether an update for existing version of something is available, simply: from lastversion import has_update latest_version = has_update ( repo = \"mautic/mautic\" , current_version = '1.2.3' ) if latest_version : print ( 'Newer Mautic version is available: {} ' . format ( str ( latest_version ))) else : print ( 'No update is available' ) The lastversion.has_update(...) function accepts any URL from a repository (or its short name , e.g. owner/name ) and you should pass an existing/current version. If you are checking version of a project on PyPi, supply an additional at='pip' argument, in order to avoid passing the full PyPI URI of a project, and remove ambiguity with GitHub hosted projects. For example, checking for newer Requests library: from lastversion import has_update latest_version = has_update ( repo = \"requests\" , at = 'pip' , current_version = '1.2.3' ) if latest_version : print ( 'Newer Requests library is available: {} ' . format ( str ( latest_version ))) else : print ( 'No update is available' ) The has_update function returns either: The Version object False if there is no newer version than the one given Alternatively, invoke lastversion.latest(...) function to get the latest version information for a repo. from lastversion import latest from packaging import version latest_mautic_version = latest ( \"mautic/mautic\" , output_format = 'version' , pre_ok = True ) print ( 'Latest Mautic version: {} ' . format ( str ( latest_mautic_version ))) if latest_mautic_version >= version . parse ( '1.8.1' ): print ( 'It is newer' ) With output_format='version' (the default), the function returns a Version object, or None . So you can do things like above, namely version comparison, checking dev status, etc. With output_format='dict' , a dictionary returned with the latest release information, or False . The dictionary keys vary between different project locations (GitHub vs BitBucket, for example), but are guaranteed to always have these keys: version : Version object, contains the found release version, e.g. 1.2.3 source : string, the identifier of the project source, e.g. github , or gitlab tag_date : datetime object, the release date, e.g. 2020-12-15 14:41:39 from : string, contains fully qualified URL of the project tag_name : string, version control tag name corresponding to the release The lastversion.latest function accepts 3 arguments repo , in format of <owner>/<name> , or any URL under this repository, e.g. https://github.com/dvershinin/lastversion/issues format , which accepts the same values as when you run lastversion interactively, as well as dict to return a dictionary as described above pre_ok , boolean for whether to include pre-releases as potential versions at , specifies project location when using one-word repo names, one of github , gitlab , bitbucket , pip , hg , sf , website-feed , local Using in Continuous Integration \u00a4 You can also use lastversion directly in your GitHub action workflows, with lastversion-action .","title":"Overview"},{"location":"#lastversion","text":"English | \u7b80\u4f53\u4e2d\u6587 A tiny command-line utility that helps to answer a simple question: What is the latest stable version for a project? ... and, optionally, download/install it. lastversion allows finding well-formatted, the latest release version of a project from these supported locations: GitHub GitLab BitBucket PyPI Mercurial SourceForge Wikipedia Arbitrary software sites which publish releases in RSS/ATOM feeds","title":"lastversion"},{"location":"#why-you-need-lastversion","text":"In general, quite many project authors complicate finding the latest version by: Creating a formal release that is clearly a Release Candidate ( rc in tag), but forgetting to mark it as a pre-release Putting extraneous text in release tag e.g. release-1.2.3 or name-1.2.3-2019 anything fancy like that Putting or not putting the v prefix inside release tags. Today yes, tomorrow not. I'm not consistent about it myself :) Switching from one version format to another, e.g. v20150121 to v2.0.1 There is no consistency in human beings. To deal with all this mess and simply get a well-formatted, last stable version (or download URL!) on the command line, you can use lastversion . Its primary use is for build systems - whenever you want to watch specific projects for released versions to build packages automatically. Or otherwise require getting the latest version in your automation scripts. Like I do lastversion does a little bit of AI to detect if releasers mistakenly filed a beta version as a stable release. It incorporates logic for cleaning up human inconsistency from version information.","title":"Why you need lastversion"},{"location":"#synopsis","text":"lastversion apache/incubator-pagespeed-ngx #> 1.13.35.2 lastversion download apache/incubator-pagespeed-ngx #> downloaded incubator-pagespeed-ngx-v1.13.35.2-stable.tar.gz lastversion download apache/incubator-pagespeed-ngx -o pagespeed.tar.gz #> downloads with chosen filename lastversion https://transmissionbt.com/ #> 3.0 lastversion format \"mysqld Ver 5.6.51-91.0 for Linux\" #> 5.6.51","title":"Synopsis"},{"location":"#installation-for-rpm-based-systems","text":"Supported: CentOS/RHEL 7, 8, 9 including clones like AlmaLinux and Rocky Linux Amazon Linux 2 Fedora Linux sudo yum -y install https://extras.getpagespeed.com/release-latest.rpm sudo yum -y install lastversion","title":"Installation for RPM-based systems"},{"location":"#installation-for-other-systems","text":"Installing with pip is easiest: pip install lastversion","title":"Installation for other systems"},{"location":"#usage","text":"Typically, you would just pass a repository URL (or repo owner/name to it) as the only argument, e.g.: lastversion https://github.com/gperftools/gperftools Equivalently accepted invocation with the same output is: lastversion gperftools/gperftools If you're lazy to even copy-paste a project's URL, you can just type its name as argument, which will use repository search API (slower). Helps to answer what is the latest Linux version: lastversion linux Or wondering what is the latest version of WordPress? lastversion wordpress A special value of self for the main argument, will look up the last release of lastversion itself. For more options to control output or behavior, see --help output: usage: lastversion [-h] [--pre] [--sem {major,minor,patch,any}] [-v] [-d [FILENAME]] [--format {version,assets,source,json,tag}] [--assets] [--source] [-gt VER] [-b MAJOR] [--only REGEX] [--exclude REGEX] [--filter REGEX] [--having-asset [ASSET]] [-su] [--even] [--at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local,helm_chart,wiki,system,wp,gitea}] [-y] [--version] [{get,download,extract,unzip,test,format,install,update-spec}] <repo URL or string> Find the latest software release. positional arguments: {get,download,extract,unzip,test,format,install,update-spec} Action to run. Default: get <repo URL or string> Repository in format owner/name or any URL that belongs to it, or a version string optional arguments: -h, --help show this help message and exit --pre Include pre-releases in potential versions --sem {major,minor,patch,any} Semantic versioning level base to print or compare against -v, --verbose Will give you an idea of what is happening under the hood, -vv to increase verbosity level -d [FILENAME], -o [FILENAME], --download [FILENAME], --output [FILENAME] Download with custom filename --format {version,assets,source,json,tag} Output format --assets Returns assets download URLs for last release --source Returns only source URL for last release -gt VER, --newer-than VER Output only if last version is newer than given version -b MAJOR, --major MAJOR, --branch MAJOR Only consider releases of a specific major version, e.g. 2.1.x --only REGEX Only consider releases containing this text. Useful for repos with multiple projects inside --exclude REGEX Only consider releases NOT containing this text. Useful for repos with multiple projects inside --even Only even versions like 1.[2].x, or 3.[6].x are considered as stable --filter REGEX Filters --assets result by a regular expression --having-asset [ASSET] Only consider releases with this asset -su, --shorter-urls A tiny bit shorter URLs produced --at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local,helm_chart,wiki,system,wp,gitea} If the repo argument is one word, specifies where to look up the project. The default is via internal lookup or GitHub Search -y, --assumeyes Automatically answer yes for all questions --version show program's version number and exit The --format will affect what kind of information from the last release and in which format will be displayed, e.g.: version is the default. Simply outputs well-formatted version number of the latest release assets will output a newline-separated list of assets URLs (if any), otherwise link to sources archive source will output link to source archive, no matter if the release has some assets added json can be used by external Python modules or for debugging, it is dict/JSON output of an API call that satisfied last version checks tag will emit just the latest release's tag name, which useful if you're constructing download URL yourself or need the tag name otherwise An asset is a downloadable file that typically represents an executable, or otherwise \"ready to launch\" project. It's what you see filed under formal releases, and is usually a compiled (for specific platform), program. Source files, are either tarballs or zipballs of sources for the source code of release. You can display either assets or source URLs of the latest release, by passing the corresponding --format flag , e.g. --format source You also simply pass --source instead of --format source , and --assets instead of --format assets , as in: lastversion --assets mautic/mautic #> https://github.com/mautic/mautic/archive/2.15.1/mautic-2.15.1.tar.gz By default, lastversion filters output of --assets to be OS-specific. Who needs .exe on Linux? To override this behavior, you can use --filter , which has a regular expression as its argument. To disable OS filtering, use --filter . , this will match everything. You can naturally use --filter in place where you would use grep , e.g. lastversion --assets --filter win REPO","title":"Usage"},{"location":"#use-case-work-with-a-multi-project-repository","text":"Sometimes a single repository actually hosts many components, and creates releases that have separate version line for each component. To help lastversion get a component's version for such repos, use --only and --exclude switches. They make lastversion look at only those releases which are tagged (or not) with specified strings. Example : lastversion --only chart https://github.com/lastversion-test-repos/autoscaler The above will report 9.16.0 . lastversion --exclude chart https://github.com/lastversion-test-repos/autoscaler The above will report a non-chart latest version, 1.23.0 . Useful for hard cases, you can pass in regular expressions for both arguments, by prepending them with tilde, like so: lastversion --only '~-po.-' https://github.com/lastversion-test-repos/autoscaler The above will consider only releases tagged with -po d -, or -po v -, etc.","title":"Use case: Work with a multi-project repository"},{"location":"#use-case-how-to-download-the-latest-version-of-something","text":"You can also use lastversion to download assets/sources for the latest release. Download the most recent Mautic source release: lastversion download mautic/mautic Customize downloaded filename (works only for sources, which is the default): lastversion download mautic/mautic -o mautic.tar.gz You can also directly fetch and extract the latest release's file into the current working directory by using extract command: lastversion extract wordpress You can have lastversion output sources/assets URLs and have those downloaded by something else: wget $( lastversion --assets mautic/mautic ) This will download all assets of the newest stable Mautic, which are 2 zip files. How this works: lastversion outputs all asset URLs, each on a new line, and wget is smart enough to download each URL. Magic :) For releases that have no assets added, it will download the source archive. To always download source, use --source instead: wget $( lastversion --source mautic/mautic )","title":"Use case: How to download the latest version of something"},{"location":"#use-case-download-specific-asset-under-specified-filename","text":"If you want to download specific asset of the last version's release and save the downloaded file under a desired name, combine -d option (for download name) and --filter for specifying assets filter. Example: lastversion --pre Aircoookie/WLED --format assets --filter ESP32.bin -d ESP32.bin","title":"Use case: Download specific asset under specified filename"},{"location":"#use-case-get-the-last-version-betas-are-fine","text":"We consider the latest release is the one that is stable / not marked as beta. If you think otherwise, then pass --pre switch and if the latest version of repository is a pre-release, then you'll get its version instead: lastversion --pre mautic/mautic #> 2.15.2b0","title":"Use case: Get the last version (betas are fine)"},{"location":"#use-case-version-of-a-specific-branch","text":"For some projects, there may be several stable releases available simultaneously, in different branches. An obvious example is PHP. You can use --major flag to specify the major release version to match with, to help you find the latest stable release of a branch, like so: lastversion php/php-src --major 7 .2 This will give you current stable version of PHP 7.2.x, e.g. 7.2.28 . Branch selector is easy to be specified after semicolon, and together with the search API, a clean invocation for the same would be: lastversion php:7.2 The branch selector can also be used to get specific release details, e.g.: lastversion php:7.2.33 --assets","title":"Use case: version of a specific branch"},{"location":"#use-case-releases-with-specific-assets","text":"Sometimes a project makes nice formal releases but delay in uploading assets for releases. And you might be interested in specific asset type always. Then you can make lastversion consider as latest only the last release with specific asset name. Easy with the --having-asset switch: lastversion telegramdesktop/tdesktop --having-asset \"Linux 64 bit: Binary\" The argument value to --having-asset can be made as regular expression. For this, prepend it with tilde sign. E.g. to get releases with macOS installers: lastversion telegramdesktop/tdesktop --having-asset \"~\\.dmg $ \" You can pass no value to --having-asset at all. Then lastversion will only return the latest release which has any assets added to it: lastversion telegramdesktop/tdesktop --having-asset","title":"Use case: releases with specific assets"},{"location":"#use-case-version-of-an-operating-system","text":"The operating systems are usually not versioned through GitHub releases or such. It is a challenge to get the last stable version of an OS other than from its website, or other announcement channels. An easy compromise that lastversion does about this, is hard coding well-known OS names, and using Wikipedia behind the scenes: lastversion rocky #> 8.4 lastversion windows #> 10.0.19043.1081 lastversion ios #> 14.6 You can supply a fully-qualified URL to a Wikipedia page for an OS/software project to get version from there, e.g.: lastversion https://en.wikipedia.org/wiki/Rocky_Linux #> 8.4","title":"Use case: version of an operating system"},{"location":"#special-use-case-nginx-stable-vs-mainline-branch-version","text":"lastversion https://nginx.org --major stable #> 1.16.1 lastversion https://nginx.org --major mainline #> 1.17.9 Behind the scenes, this checks with hg.nginx.org which is a Mercurial web repo. Those are supported as well, e.g. lastversion https://hg.example.com/project/ Mercurial repositories are rather rare these days, but support has been added primarily for NGINX.","title":"Special use case: NGINX stable vs mainline branch version"},{"location":"#special-use-case-find-the-release-of-a-pypi-project","text":"Most Python libraries/apps are hosted on PyPI. To check versions of a project on PyPI, you can use: lastversion https://pypi.org/project/requests/ If you prefer using a shorter repo name, ensure --at pip switch, like so: lastversion requests --at pip","title":"Special use case: find the release of a PyPI project"},{"location":"#install-an-rpm-asset","text":"If a project provides .rpm assets and your system has yum or dnf , you can install the project's RPM directly, like so: sudo lastversion install mailspring This finds MailSpring , gets its latest release info, filters assets for .rpm and passes it to yum / dnf . You can even set up an auto-updater cron job which will ensure you are on the latest version of a package, like so: @daily /usr/bin/lastversion install mailspring -y 2 >/dev/null If the Mailspring GitHub repo posts a release with newer .rpm , then it will be automatically installed, making sure you are running the latest and greatest Mailspring version. You'll even get an email alert after update (standard cron feature). Needless to say, more often than not such RPM packages have no idea about all potentially missing dependencies. Thus, only use lastversion install ... if the software is missing from the base yum repositories.","title":"Install an RPM asset"},{"location":"#install-an-appimage","text":"If a project provides .AppImage , you can install those directly using lastversion . The AppImage is self-contained Linux executable file. What lastversion does for you, is fetch the latest release's AppImage , installs it under ~/Applications/<app> and makes it executable. Just run: lastversion install fluent-reader","title":"Install an AppImage"},{"location":"#test-version-parser","text":"The test command can be used for troubleshooting or simply well formatting a string with version: lastversion test 'blah-1.2.3-devel' # > 1.2.3.dev0 lastversion test '1.2.x' # > False (no clear version) lastversion test '1.2.3-rc1' # > 1.2.3rc1","title":"Test version parser"},{"location":"#scripting-with-lastversion-in-bash","text":"","title":"Scripting with lastversion in bash"},{"location":"#semantic-versioning-support","text":"Sometimes you only want to check updates for a specific semantic versioning level. Does a project have a new minor release? Does a project have a new major release? To print just the necessary semantic versioning base, use --sem option. Acceptable values are major , minor , and patch . lastversion wordpress --sem major #> 5 lastversion wordpress --sem minor #> 5.9 lastversion wordpress --sem patch #> 5.9.3 The value --sem patch can be used to normalize a given result to semantic versioning, if a project doesn't follow the semantics strictly. E.g. sometimes WordPress would publish an x.y release while it's implicitly x.y.0. So let's say WordPress released \"5.10\": lastversion wordpress --sem patch #> 5.10.0","title":"Semantic versioning support"},{"location":"#format-any-version-string","text":"Say you ran mysqld --version and got this output: mysqld Ver 5.6.51-91.0 for Linux on x86_64 (Percona Server (GPL), Release 91.0, Revision b59139e) This is rather hard to parse in bash if you want to just extract the major MySQL server version. lastversion can easily parse out and give the desired information based on desired semantic versioning level: lastversion --sem major format \"mysqld Ver 5.6.51-91.0 for Linux on x86_64 (Percona Server (GPL) , Release 91.0, Revision b59139e)\" #> 5","title":"Format any version string"},{"location":"#compare-arbitrary-versions","text":"Use lastversion for easy comparison of versions on the command line. Compare two versions, the command will output the highest version: lastversion 1 .2.3 -gt 1 .2.4 #> 1.2.4 See exit codes below, to find whether the first argument is a higher version, or the second. The --sem option described earlier will affect both what's being printed and what semantic versioning base level is being compared, thus the result.","title":"Compare arbitrary versions"},{"location":"#check-for-new-release","text":"When you're building some upstream package, and you did this before, there is a known \"last build\" version. Automatic builds become easy with: CURRENTLY_BUILT_VER = 1 .2.3 # stored somewhere, e.g. spec file in my case LASTVER = $( lastversion repo/owner -gt ${ CURRENTLY_BUILT_VER } ) if [[ $? -eq 0 ]] ; then # LASTVER is newer, update and trigger build # .... fi Here, the -gt is actually a switch passed to lastversion , which acts in a similar fashion to -gt comparison in bash. There is more to it, if you want to make this reliable. See my ranting on RPM auto-builds with lastversion","title":"Check for NEW release"},{"location":"#check-if-there-is-a-newer-kernel-for-your-linux-machine","text":"LATEST_KERNEL = $( lastversion linux -gt $( uname -r | cut -d '-' -f 1 )) if [[ $? -eq 0 ]] ; then echo \"I better update my kernel now, because ${ LATEST_KERNEL } is there\" else echo \"My kernel is latest and greatest.\" fi","title":"Check if there is a newer kernel for your Linux machine"},{"location":"#exit-status-codes","text":"Exit status codes are the usual means of communicating a command's execution success or failure. So lastversion follows this: successful command returns 0 while anything else is an error of some kind: Exit status code 1 is returned for cases like no release tag existing for repository at all, or repository does not exist. Exit status code 2 is returned for -gt version comparison negative lookup. Exit status code 3 is returned when filtering assets of last release yields empty URL set (no match)","title":"Exit Status codes"},{"location":"#tips","text":"Getting the latest version is heavy on the API, because GitHub does not allow to fetch tags in chronological order, and some repositories switch from one version format to another, so we can't just consider the highest version to be latest . We have to fetch every tag's commit date, and see if it's actually more recent. Thus, it's slower with larger repositories, which have potentially a lot of tags. Thus, lastversion makes use of caching API response to be fast and light on GitHub API, It does conditional ETag validation, which, as per GitHub API will not count towards rate limit. The cache is stored in ~/.cache/lastversion on Linux systems. It is much recommended to set up your GitHub API token . Bare API token is enough, you may deselect all permissions. You can then increase your rate limit by adding the following ~/.bashrc file: export GITHUB_API_TOKEN = xxxxxxxxxxxxxxx You can use either GITHUB_API_TOKEN or GITHUB_TOKEN environment variable. The former has priority. For GitLab, you can use a Personal Access Token : export GITLAB_PA_TOKEN = xxxxxxxxxxxxxxx Then run source ~/.bashrc . After this, lastversion will use it to get larger API calls allowance from GitHub.","title":"Tips"},{"location":"#usage-in-a-python-module","text":"You can use lastversion.has_update(...) to find whether an update for existing version of something is available, simply: from lastversion import has_update latest_version = has_update ( repo = \"mautic/mautic\" , current_version = '1.2.3' ) if latest_version : print ( 'Newer Mautic version is available: {} ' . format ( str ( latest_version ))) else : print ( 'No update is available' ) The lastversion.has_update(...) function accepts any URL from a repository (or its short name , e.g. owner/name ) and you should pass an existing/current version. If you are checking version of a project on PyPi, supply an additional at='pip' argument, in order to avoid passing the full PyPI URI of a project, and remove ambiguity with GitHub hosted projects. For example, checking for newer Requests library: from lastversion import has_update latest_version = has_update ( repo = \"requests\" , at = 'pip' , current_version = '1.2.3' ) if latest_version : print ( 'Newer Requests library is available: {} ' . format ( str ( latest_version ))) else : print ( 'No update is available' ) The has_update function returns either: The Version object False if there is no newer version than the one given Alternatively, invoke lastversion.latest(...) function to get the latest version information for a repo. from lastversion import latest from packaging import version latest_mautic_version = latest ( \"mautic/mautic\" , output_format = 'version' , pre_ok = True ) print ( 'Latest Mautic version: {} ' . format ( str ( latest_mautic_version ))) if latest_mautic_version >= version . parse ( '1.8.1' ): print ( 'It is newer' ) With output_format='version' (the default), the function returns a Version object, or None . So you can do things like above, namely version comparison, checking dev status, etc. With output_format='dict' , a dictionary returned with the latest release information, or False . The dictionary keys vary between different project locations (GitHub vs BitBucket, for example), but are guaranteed to always have these keys: version : Version object, contains the found release version, e.g. 1.2.3 source : string, the identifier of the project source, e.g. github , or gitlab tag_date : datetime object, the release date, e.g. 2020-12-15 14:41:39 from : string, contains fully qualified URL of the project tag_name : string, version control tag name corresponding to the release The lastversion.latest function accepts 3 arguments repo , in format of <owner>/<name> , or any URL under this repository, e.g. https://github.com/dvershinin/lastversion/issues format , which accepts the same values as when you run lastversion interactively, as well as dict to return a dictionary as described above pre_ok , boolean for whether to include pre-releases as potential versions at , specifies project location when using one-word repo names, one of github , gitlab , bitbucket , pip , hg , sf , website-feed , local","title":"Usage in a Python module"},{"location":"#using-in-continuous-integration","text":"You can also use lastversion directly in your GitHub action workflows, with lastversion-action .","title":"Using in Continuous Integration"},{"location":"README-ZH-CN/","text":"lastversion \u00a4 English | \u7b80\u4f53\u4e2d\u6587 \u4e00\u4e2a\u8f7b\u5de7\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5e2e\u52a9\u4f60\u67e5\u8be2\u4e00\u4e2a\u9879\u76ee/\u8f6f\u4ef6\u7684\u6700\u65b0\u7248\u672c\u53f7\u53ca\u5404\u79cd\u76f8\u5173\u4fe1\u606f\uff0c\u6bd4\u5982\u4e0b\u8f7d\u94fe\u63a5\u3002 lastversion \u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u7f51\u7ad9\u627e\u5230\u4e00\u4e2a\u9879\u76ee\u7684\u683c\u5f0f\u826f\u597d\u7684\u6700\u65b0\u7684\u7248\u672c\u53f7\u3002 GitHub GitLab BitBucket PyPI Mercurial SourceForge Wikipedia \u4efb\u4f55\u4ee5 RSS/ATOM \u8ba2\u9605\u65b9\u5f0f\u53d1\u5e03\u8f6f\u4ef6\u7f51\u7ad9\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981 lastversion \uff1f \u00a4 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8bb8\u591a\u9879\u76ee\u4f5c\u8005\u7684\u4e00\u4e9b\u505a\u6cd5\u4f1a\u8ba9\u6211\u4eec\u96be\u4ee5\u5bfb\u627e\u4e00\u4e2a\u9879\u76ee\u7684\u6700\u65b0\u7248\u672c\u53ca\u5176\u7248\u672c\u53f7\u3002 \u53d1\u5e03\u4e00\u4e2a\u5019\u9009\u7248\u672c\u7684\u65f6\u5019\u5fd8\u8bb0\u5c06\u5176\u6807\u8bb0\u4e3a\u9884\u53d1\u5e03\u7248\u672c\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6b63\u5f0f\u7248\u672c\u53bb\u53d1\u5e03\u3002\u6bd4\u5982\u7248\u672c\u6807\u7b7e\u4e3a v2.0.1-rc \u4f46\u662f\u5728\u53d1\u5e03\u65f6\u5e76\u672a\u6807\u8bb0\u4e3a\u9884\u53d1\u5e03\u7248\u672c\u3002 \u5728\u7248\u672c\u6807\u7b7e\u4e2d\u52a0\u5165\u65e0\u5173\u7684\u6587\u672c\uff0c\u4f8b\u5982 release-1.2.3 \u6216 name-1.2.3-2019 \uff0c\u6216\u8005\u5176\u5b83\u7c7b\u4f3c\u7684\u6587\u672c\u3002 \u7248\u672c\u6807\u7b7e\u662f\u5426\u5e26\u6709 v \u524d\u7f00\uff1f\u4eca\u5929\u53ef\u80fd\u5e26\uff0c\u4f46\u660e\u5929\u53ef\u80fd\u5c31\u4e0d\u5e26\u4e86\u3002\u6211\u4e5f\u662f\u8fd9\u6837\u7684 :)\u3002 \u5207\u6362\u5230\u53e6\u4e00\u79cd\u7248\u672c\u6807\u7b7e\u683c\u5f0f\uff0c\u4f8b\u5982\u4ece v20150121 \u5207\u6362\u5230 v2.0.1 \u3002 \u4eba\u4e0e\u4eba\u4e4b\u95f4\u96be\u4ee5\u4fdd\u6301\u4e00\u81f4\u3002 \u6709\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u8f6f\u4ef6\u90fd\u6709\u4e00\u4e2a\u56fa\u5b9a\u683c\u5f0f\u7684\u7248\u672c\u53f7\uff0c lastversion \u53ef\u4ee5\u5e2e\u52a9\u4f60\uff0c\u5b83\u53ef\u4ee5\u8ba9\u4f60\u67e5\u8be2\u67d0\u4e2a\u9879\u76ee\u7684\u6700\u65b0\u7248\u672c\u7684\u540c\u65f6\u8fd4\u56de\u4e00\u4e2a\u56fa\u5b9a\u683c\u5f0f\u7684\u7248\u672c\u53f7\uff0c\u5e76\u53ef\u4ee5\u83b7\u53d6\u4e0b\u8f7d\u94fe\u63a5\u7b49\u989d\u5916\u4fe1\u606f\u3002 lastversion \u4e3b\u8981\u7528\u4e8e\u81ea\u52a8\u5316\u811a\u672c\uff0c\u6bd4\u5982\u81ea\u52a8\u66f4\u65b0\u548c\u6301\u7eed\u96c6\u6210\u7b49\u3002 \u5c31\u50cf\u6211\u8fd9\u4e48\u505a lastversion \u4f7f\u7528\u4e86\u7b80\u5355\u7684 AI \u6765\u53c2\u4e0e\u5230\u68c0\u6d4b\u4e2d\uff0c \u6bd4\u5982\u6e05\u7406\u7248\u672c\u53f7\u4e2d\u7684\u65e0\u7528\u4fe1\u606f\uff0c\u6bd4\u5982\u5c06 name-v1.2.3 \u4fee\u6539\u4e3a 1.2.3 \uff0c \u4e5f\u7528\u5b83\u6765\u68c0\u6d4b\u53d1\u5e03\u8005\u662f\u5426\u6df7\u6dc6\u4e86\u6d4b\u8bd5\u7248\u548c\u7a33\u5b9a\u7248\u3002 \u7b80\u4ecb \u00a4 lastversion apache/incubator-pagespeed-ngx #> 1.13.35.2 lastversion apache/incubator-pagespeed-ngx -d #> downloaded incubator-pagespeed-ngx-v1.13.35.2-stable.tar.gz lastversion apache/incubator-pagespeed-ngx -d pagespeed.tar.gz #> downloads with chosen filename lastversion https://transmissionbt.com/ #> 3.0 \u5728 CentOS/RHEL 7, 8 \u6216 Amazon Linux 2 \u4e0a\u5b89\u88c5 lastversion \u00a4 sudo yum -y install https://extras.getpagespeed.com/release-latest.rpm sudo yum install lastversion \u5728\u5176\u5b83\u7cfb\u7edf\u4e0a\u5b89\u88c5 lastversion \u00a4 \u7528 pip \u5b89\u88c5\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002 pip install lastversion \u4f7f\u7528\u65b9\u6cd5 \u00a4 \u4e00\u822c\u6765\u8bf4\uff0c lastversion \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u4e00\u4e2a\u4ed3\u5e93\u7684 URL\uff08\u6216 \u7528\u6237\u540d/\u4ed3\u5e93\u540d\uff09\uff0c\u4f8b\u5982\uff1a lastversion https://github.com/gperftools/gperftools \u4e0e\u4e4b\u7b49\u4ef7\u7684\u547d\u4ee4\u4e3a lastversion gperftools/gperftools \u5982\u679c\u4f60\u60f3\u5077\u61d2\uff0c\u4e0d\u60f3\u590d\u5236\u7c98\u8d34\u9879\u76ee\u7684 URL\uff0c \u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u9879\u76ee\u7684\u540d\u5b57\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u5c06\u4f1a\u4f7f\u7528\u4ed3\u5e93\u641c\u7d22 API\uff08\u901f\u5ea6\u6bd4\u8f83\u6162\uff09\u3002 \u4e0b\u9762\u7684\u8fd9\u6761\u547d\u4ee4\u53ef\u4ee5\u8ba9\u4f60\u77e5\u9053 Linux \u7684\u6700\u65b0\u7248\u672c\u3002 lastversion linux \u6216\u8005\u67e5\u8be2 Wordpress \u7684\u6700\u65b0\u7248\u672c\u3002 lastversion wordpress self \u662f\u4e3b\u53c2\u6570\u4e2d\u7684\u4e00\u4e2a\u7279\u6b8a\u503c\uff0c\u5b83\u53ef\u4ee5\u67e5\u627e lastversion \u7684\u6700\u65b0\u7248\u672c\uff0c\u4f8b\u5982\uff1a lastversion self \u4f60\u53ef\u4ee5\u901a\u8fc7 --help \u67e5\u770b\u548c\u8f93\u51fa\u63a7\u5236\uff08\u884c\u4e3a\uff09\u76f8\u5173\u7684\u9009\u9879\u3002 usage: lastversion [-h] [--pre] [--verbose] [-d [FILENAME]] [--format {version,assets,source,json,tag}] [--assets] [--source] [-gt VER] [-b MAJOR] [--only ONLY] [--filter REGEX] [-su] [--at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local}] [-y] [--version] [action] <repo or URL> Find the latest software release. positional arguments: action Special action to run, e.g. download, install, test <repo or URL> GitHub/GitLab/BitBucket/etc. repository in format owner/name or any URL that belongs to it optional arguments: -h, --help show this help message and exit --pre Include pre-releases in potential versions --verbose Will give you an idea of what is happening under the hood -d [FILENAME], --download [FILENAME] Download with custom filename --format {version,assets,source,json,tag} Output format --assets Returns assets download URLs for last release --source Returns only source URL for last release -gt VER, --newer-than VER Output only if last version is newer than given version -b MAJOR, --major MAJOR, --branch MAJOR Only consider releases of a specific major version, e.g. 2.1.x --only ONLY Only consider releases containing this text. Useful for repos with multiple projects inside --filter REGEX Filters --assets result by a regular expression --having-asset [ASSET] Only consider releases with this asset -su, --shorter-urls A tiny bit shorter URLs produced --at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local} If the repo argument is one word, specifies where to look up the project. The default is via internal lookup or GitHub Search -y, --assumeyes Automatically answer yes for all questions --version show program's version number and exit --format \u9009\u9879\u5c06\u4f1a\u6307\u5b9a\u8f93\u51fa\u7684\u683c\u5f0f\u3002 version \u9ed8\u8ba4\u503c\uff0c\u8f93\u51fa\u683c\u5f0f\u6700\u65b0\u7684\uff0c\u683c\u5f0f\u826f\u597d\u7684\u7248\u672c\u53f7\u3002 assets \u4f1a\u4ee5\u6362\u884c\u5206\u5272\u7684\u6700\u65b0\u7248\u672c\u7684 asset \u7684 URL\uff08\u5982\u679c\u6709\u591a\u4e2a asset \u7684\u8bdd\uff09\uff0c\u5426\u5219\u5c06\u4e3a\u6700\u65b0\u6e90\u7801\u94fe\u63a5\uff08\u901a\u5e38\u4e3a .tar.gz \u6216 .zip\uff09\u3002 source \u5c06\u8f93\u51fa\u6700\u65b0\u6e90\u7801\u7684\u94fe\u63a5\uff08\u901a\u5e38\u4e3a .tar.gz \u6216 .zip\uff09\uff0c\u5373\u4f7f\u6700\u65b0\u7248\u672c\u540c\u65f6\u53d1\u5e03\u4e86\u5176\u5b83\u7684 asset\u3002 json \u6b64\u683c\u5f0f\u53ef\u4ee5\u88ab Python \u7a0b\u5e8f\u5904\u7406\u3002 tag \u53ea\u8f93\u51fa\u6700\u65b0\u7248\u672c\u7684\u6807\u7b7e\u540d\u3002 asset \u5728\u672c\u6587\u662f\u6307\u4e00\u4e2a\u53ef\u4e0b\u8f7d\u7684\u6587\u4ef6\uff0c \u4e00\u822c\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4f8b\u5982\u4e00\u4e2a\u9879\u76ee\u53d1\u5e03\u7684\u65f6\u5019\u4f1a\u8fde\u5e26\u53d1\u5e03\u5404\u4e2a\u5e73\u53f0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u8ba9\u7528\u6237\u65e0\u9700\u7f16\u8bd1\u6e90\u4ee3\u7801\u5373\u53ef\u4f7f\u7528\u3002 \u4f60\u53ef\u4ee5\u67e5\u770b\u6700\u65b0\u7248\u672c\u7684 asset \u6216\u6e90\u4ee3\u7801\u6587\u4ef6\u7684 URL \u901a\u8fc7\u9009\u62e9\u9002\u5f53\u7684 --format flag \u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 --source \u53bb\u4ee3\u66ff --format source \uff0c\u7528 --assets \u4ee3\u66ff --format assets \uff0c\u4f8b\u5982\uff1a lastversion --assets mautic/mautic #> https://github.com/mautic/mautic/archive/2.15.1/mautic-2.15.1.tar.gz \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c lastversion \u4f1a\u6839\u636e\u4e0d\u540c\u7684 OS \u8fc7\u6ee4\u6389\u4e00\u4e9b --assets \u7684\u8f93\u51fa\u3002 \u5728 Linux \u4e0a\u8c01\u9700\u8981 .exe \u5462\uff1f \u4f60\u53ef\u4ee5\u4f7f\u7528 --filter \u6765\u8986\u76d6\u6389\u8fd9\u4e00\u884c\u4e3a\uff0c \u5b83\u4f7f\u7528\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u6839\u636e OS \u8fc7\u6ee4\u6389 asset\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 --filter \u6765\u5339\u914d\u6240\u6709\u7684asset\u3002 \u4f60\u4f60\u53ef\u4ee5\u5f88\u4f18\u96c5\u5730\u4f7f\u7528 --filter \u6765\u4ee3\u66ff grep \u547d\u4ee4\uff0c\u4f8b\u5982\uff1a lastversion --assets --filter win REPO \u7528\u4f8b: \u4e0b\u8f7d\u6700\u65b0\u7248\u672c \u00a4 \u4f60\u53ef\u4ee5\u4f7f\u7528 lastversion \u6765\u4e0b\u8f7d\u6700\u65b0\u7248\u672c\u7684 asset \u548c\u6e90\u4ee3\u7801\u3002 \u4e0b\u8f7d\u6700\u65b0\u7684 Mautic \u6e90\u7801\uff1a lastversion mautic/mautic --download \u81ea\u5b9a\u4e49\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\uff08\u53ea\u5bf9\u4e0b\u8f7d\u6e90\u4ee3\u7801\u6709\u6548\u5e76\u4e14\u6b64\u4e3a\u9ed8\u8ba4\u8bbe\u7f6e\uff09\uff1a lastversion mautic/mautic --download mautic.tar.gz \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 lastversion \u8f93\u51fa\u6e90\u4ee3\u7801\u6216\u8005 asset \u7684 URL \u5e76\u4e0b\u8f7d\u5b83\uff0c\u4f8b\u5982\uff1a wget $( lastversion --assets mautic/mautic ) \u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\u4f1a\u4e0b\u8f7d\u6240\u6709\u7684\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u7684 asset\uff0c\u5373\u4e24\u4e2a .zip \u6587\u4ef6\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u80fd\u591f\uff1f \u56e0\u4e3a lastversion \u4f1a\u8f93\u51fa\u5728\u4e24\u4e2a .zip \u6587\u4ef6\u7684 URL \u5e76\u901a\u8fc7\u6362\u884c\u5206\u5272\uff0c wget \u4e5f\u5f88\u806a\u660e\u5730\u4e0b\u8f7d\u6bcf\u884c\u7684 URL\uff0c\u5f88\u795e\u5947\u5427 :)\u3002 \u5982\u679c\u6700\u65b0\u53d1\u5e03\u4e2d\u6ca1\u6709 asset\uff0c\u5219\u4f1a\u76f4\u63a5\u4e0b\u8f7d\u6e90\u4ee3\u7801\u3002 \u5982\u679c\u4f60\u53ea\u60f3\u4e0b\u8f7d\u6e90\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --source \uff0c\u4f8b\u5982\uff1a wget $( lastversion --source mautic/mautic ) \u7528\u4f8b: \u83b7\u53d6\u6700\u65b0\u7248\u672c\uff08\u542b\u6d4b\u8bd5\u7248\uff09 \u00a4 lastversion \u8ba4\u4e3a\u6700\u65b0\u7248\u672c\u662f\u7a33\u5b9a\u7248\u672c\u6216\u8005\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u6d4b\u8bd5\u7684\u7248\u672c\u3002 \u5982\u679c\u4f60\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --pre \u5c06\u9884\u53d1\u5e03\u7248\u672c\u4f5c\u4e3a\u6700\u65b0\u7248\u3002 lastversion --pre mautic/mautic #> 2.15.2b0 \u7528\u4f8b: \u83b7\u53d6\u7279\u5b9a\u7684\u5206\u652f/\u7248\u672c \u00a4 \u4e00\u4e9b\u9879\u76ee\u53ef\u80fd\u4f1a\u4e00\u8d77\u5728\u4e0d\u540c\u7684\u5206\u652f\u4e0a\u53d1\u5e03\u7a33\u5b9a\u7248\u672c\uff0c \u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f PHP\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --major \u53bb\u6307\u5b9a\u67d0\u4e2a\u4e3b\u7248\u672c\uff0c\u4f8b\u5982\uff1a lastversion php/php-src --major 7 .2 \u8fd9\u884c\u547d\u4ee4\u4f1a\u8f93\u51fa\u5f53\u524d\u7684 PHP \u7a33\u5b9a\u7684\u7248\u672c\uff0c\u5176\u7248\u672c\u683c\u5f0f\u4e3a 7.2.x \u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8fd9\u79cd\u7b80\u5355\u7684\u5199\u6cd5\u6765\u8fbe\u5230\u51e0\u4e4e\u76f8\u540c\u7684\u6548\u679c\uff0c\u5373\u5728\u5192\u53f7\u540e\u6307\u5b9a\u4e3b\u7248\u672c\u3002 lastversion php:7.2 \u4f60\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u7248\u672c\uff0c\u4f8b\u5982\uff1a lastversion php:7.2.33 --assets \u7528\u4f8b\uff1a\u68c0\u67e5\u662f\u5426\u53d1\u5e03 assets \u00a4 \u6709\u65f6\u5019\u4e00\u4e2a\u9879\u76ee\u53ef\u80fd\u5df2\u7ecf\u53d1\u5e03\u4e86\u65b0\u7684\u7248\u672c\uff0c\u4f46\u662f\u76f8\u5173\u7684 assets \u5e76\u6ca1\u6709\u7b2c\u4e00\u65f6\u95f4\u53d1\u5e03\uff0c\u6bd4\u5982\u5404\u5927\u5e73\u53f0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 \u5982\u679c\u4f60\u53ea\u60f3\u8981\u67d0\u4e9b assets\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --having-asset \u6765\u5b9e\u73b0\u3002 lastversion telegramdesktop/tdesktop --having-asset \"Linux 64 bit: Binary\" --having-asset \u63a5\u6536\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5339\u914d assets \u7684\u540d\u79f0\u3002 \u83b7\u53d6\u5305\u542b macOS \u5e73\u53f0\u7684\u5b89\u88c5\u7a0b\u5e8f\u7684\u6700\u65b0\u7248\u672c\u53f7\u3002 lastversion telegramdesktop/tdesktop --having-asset \"~\\.dmg $ \" \u5982\u679c\u4f60\u4e0d\u4e3a --having-asset \u6307\u5b9a\u4efb\u4f55\u503c\uff0c\u90a3\u4e48\u5c06\u5339\u914d\u6240\u6709 assets\uff0c\u53ca\u53ea\u8981\u5305\u542b\u4efb\u610f\u7684 assets \u5747\u53ef\u3002 lastversion telegramdesktop/tdesktop --having-asset \u7528\u4f8b\uff1a\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u7684\u7248\u672c\u53f7 \u00a4 \u64cd\u4f5c\u7cfb\u7edf\u901a\u5e38\u4e0d\u4f1a\u5728 Github \u53d1\u5e03\u7248\u672c\uff0c\u4f60\u901a\u5e38\u53ea\u80fd\u901a\u8fc7\u5b98\u65b9\u7f51\u7ad9\u7b49\u6e20\u9053\u624d\u80fd\u83b7\u53d6\uff0c \u4e0d\u8fc7 lastversion \u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002 lastversion \u7684\u505a\u6cd5\u7b80\u5355\u7c97\u66b4\uff0c\u5c06\u5e38\u89c1\u7684\u64cd\u4f5c\u7cfb\u7edf\u540d\u79f0\u53ca\u5176\u5bf9\u5e94\u7684 Wikipedia \u8054\u7cfb\u8d77\u6765\u5e76\u786c\u7f16\u7801\u5230\u7a0b\u5e8f\u4e2d\u3002 lastversion rocky #> 8.4 lastversion windows #> 10.0.19043.1081 lastversion ios #> 14.6 \u4f60\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u67d0\u4e2a\u8f6f\u4ef6/\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b8c\u6574\u7684 Wikipedia \u7684 URL \u6765\u5b8c\u6210\u76f8\u540c\u7684\u64cd\u4f5c\u3002 lastversion https://en.wikipedia.org/wiki/Rocky_Linux #> 8.4 \u7279\u6b8a\u7528\u4f8b: NGINX \u7684\u7a33\u5b9a\u7248\uff08Stable\uff09\u548c\u4e3b\u7ebf\u7248\uff08Mainline\uff09 \u00a4 lastversion https://nginx.org --major stable #> 1.16.1 lastversion https://nginx.org --major mainline #> 1.17.9 \u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\u5176\u5b9e\u662f\u68c0\u67e5 hg.nginx.org \uff0c\u5b83\u662f\u4e00\u4e2a Mercurial \u7f51\u7edc\u4ed3\u5e93\u3002 \u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a lastversion https://hg.example.com/project/ Mercurial \u4ed3\u5e93\u73b0\u5728\u6bd4\u8f83\u5c11\u89c1\uff0c lastversion \u652f\u6301\u5b83\u4e3b\u8981\u662f\u4e3a\u4e86 NGINX\u3002 \u7279\u6b8a\u7528\u4f8b: \u83b7\u53d6 PyPI \u9879\u76ee \u00a4 \u5927\u591a\u6570 Python \u7684\u5e93\u548c\u5e94\u7528\u7a0b\u5e8f\u90fd\u6258\u7ba1\u5728 PyPI \u4e0a\u3002\u8981\u83b7\u53d6 PyPI \u4e0a\u9879\u76ee\u7684\u7248\u672c\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u3002 lastversion https://pypi.org/project/requests/ \u5982\u679c\u60a8\u4e0d\u60f3\u5199\u592a\u957f\u7684\u53c2\u6570\uff0c\u53ea\u60f3\u5199\u4ed3\u5e93\u540d\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528 --at pip \uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002 lastversion requests --at pip \u5b89\u88c5 RPM \u8d44\u6e90 \u00a4 \u5982\u679c\u4e00\u4e2a\u9879\u76ee\u63d0\u4f9b .rpm \u8d44\u6e90\u4e14\u4f60\u7684 OS \u53ef\u4ee5\u4f7f\u7528 yum \u6216 dnf \uff0c \u4f60\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u8be5\u9879\u76ee\u7684 RPM\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a sudo lastversion install mailspring \u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\u4ece MailSpring \u7684\u6700\u65b0\u7248\u672c\u4e2d\u627e\u5230 .rpm \u5e76\u4f20\u9012\u7ed9 yum \u6216 dnf \u3002 \u4f60\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7 cron \u5b9e\u73b0\u81ea\u52a8\u66f4\u65b0\uff0c\u8fd9\u5c06\u786e\u4fdd\u4f60\u5728\u67d0\u4e2a\u5305\u4e3a\u6700\u65b0\u7248\u672c\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a @daily /usr/bin/lastversion install mailspring -y 2 >/dev/null \u5982\u679c MailSpring \u7684 Github \u4ed3\u5e93\u53d1\u5e03\u4e86\u4e00\u4e2a\u66f4\u65b0\u7684 .rpm \uff0c \u90a3\u4e48\u8fd9\u4e2a .rpm \u4f1a\u88ab\u81ea\u52a8\u5b89\u88c5\uff0c\u4ee5\u786e\u4fdd\u4f60\u7684\u7248\u672c\u7684\u6700\u65b0\u7684\u3002 \u4f60\u751a\u81f3\u53ef\u4ee5\u5728\u66f4\u65b0\u5b8c\u6bd5\u540e\u6536\u5230\u90ae\u4ef6\u63d0\u9192\uff08cron \u7684\u6807\u51c6\u529f\u80fd\uff09\u3002 \u4e0d\u7528\u8bf4\u90fd\u77e5\u9053\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5bfc\u81f4\u6211\u4eec\u4e0d\u77e5\u9053\u6f5c\u5728\u7684\u7f3a\u5931\u7684\u4f9d\u8d56\u3002 \u6240\u4ee5\uff0c\u53ea\u6709\u5f53 yum \u5e93\u6ca1\u6709\u4f60\u6240\u9700\u8981\u7684\u4e1c\u897f\u7684\u65f6\u5019\u624d\u4f7f\u7528 lastversion install ... \u3002 \u6d4b\u8bd5\u300c\u7248\u672c\u89e3\u6790\u5668\u300d \u00a4 test \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u6392\u9664\u6545\u969c\u6216\u8005\u7b80\u5355\u5730\u683c\u5f0f\u5316\u4e00\u4e2a\u7248\u672c\u6807\u7b7e\u3002 lastversion test 'blah-1.2.3-devel' # > 1.2.3.dev0 lastversion test '1.2.x' # > False (no clear version) lastversion test '1.2.3-rc1' # > 1.2.3rc1 \u5728 bash \u4e0a\u7528 lastversion \u7f16\u5199\u811a\u672c \u00a4 \u7248\u672c\u53f7\u6bd4\u8f83 \u00a4 \u4f60\u53ef\u4ee5\u4f7f\u7528 lastversion \u8f7b\u677e\u5730\u6bd4\u8f83\u4e24\u4e2a\u7248\u672c\u53f7\u5e76\u8f93\u51fa\u66f4\u52a0\u65b0\u7684\u90a3\u4e2a\u3002 lastversion 1 .2.3 -gt 1 .2.4 #> 1.2.4 \u68c0\u67e5\u66f4\u65b0 \u00a4 \u5f53\u4f60\u60f3\u8981\u6784\u5efa\u67d0\u4e2a\u4e0a\u6e38\u7684\u5305\u7684\u65f6\u5019\uff0c\u800c\u4e14\u6b64\u65f6\u4f60\u4e5f\u6709\u8fd9\u4e2a\u5305\u4e0a\u6b21\u6784\u5efa\u65f6\u7684\u7248\u672c\u53f7\uff0c\u90a3\u4e48\u81ea\u52a8\u6784\u5efa\u5c06\u4f1a\u5341\u5206\u5bb9\u6613\u3002 CURRENTLY_BUILT_VER = 1 .2.3 # \u5b58\u50a8\u5728\u5176\u5b83\u4f4d\u7f6e\u6bd4\u5982\u6587\u4ef6\u4e2d LASTVER = $( lastversion repo/owner -gt ${ CURRENTLY_BUILT_VER } ) if [[ $? -eq 0 ]] ; then # \u68c0\u6d4b\u5230\u6700\u65b0\u7248\u672c\uff0c\u89e6\u53d1\u6784\u5efa\u6d41\u7a0b\u3002 # .... fi \u6ce8\u610f\uff0c -gt \u53c2\u6570\u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e bash \u4e2d\u7684 -gt \u6bd4\u8f83\u3002 \u8fd8\u6709\u66f4\u591a\u5185\u5bb9\uff0c\u5982\u679c\u4f60\u60f3\u8ba9\u8fd9\u53d8\u5f97\u66f4\u9760\u8c31\u7684\u8bdd\uff0c \u8bf7\u542c\u6211\u5520\u53e8\uff1a RPM auto-builds with lastversion \u68c0\u67e5\u4f60\u7684 Linux \u662f\u5426\u6709\u66f4\u65b0\u7684\u5185\u6838\u7248\u672c \u00a4 LATEST_KERNEL = $( lastversion linux -gt $( uname -r | cut -d '-' -f 1 )) if [[ $? -eq 0 ]] ; then echo \"I better update my kernel now, because ${ LATEST_KERNEL } is there\" else echo \"My kernel is latest and greatest.\" fi \u9000\u51fa\u72b6\u6001\u7801 \u00a4 \u9000\u51fa\u72b6\u6001\u7801\u662f\u4f20\u9012\u547d\u4ee4\u6267\u884c\u6210\u529f\u4e0e\u5426\u7684\u5e38\u7528\u624b\u6bb5\u3002\u5bf9\u4e8e lastversion \u6765\u8bf4\uff0c \u5982\u679c\u547d\u4ee4\u6267\u884c\u6210\u529f\u5219\u8fd4\u56de 0 \uff0c\u5176\u5b83\u8fd4\u56de\u503c\u7684\u542b\u4e49\uff1a \u8fd4\u56de\u503c 1 \u4ee3\u8868\u4ed3\u5e93\u4e0d\u5b58\u5728\u6216\u8005\u6ca1\u6709\u53d1\u5e03\u8fc7\u7248\u672c\u3002 \u8fd4\u56de\u503c 2 \u4ee3\u8868\u6ca1\u6709\u6bd4 -gt \u6240\u6307\u5b9a\u7684\u7248\u672c\u66f4\u65b0\u7684\u7248\u672c\u3002 \u8fd4\u56de\u503c 3 \u4ee3\u8868 --filter \u8fc7\u6ee4\u6389\u4e86\u6240\u6709\u7684 URL\uff0c\u5373\u6b63\u5219\u8868\u8fbe\u5f0f\u6ca1\u6709\u5339\u914d\u5230\u4efb\u4f55 URL\u3002 \u5c0f\u8d34\u58eb \u00a4 \u901a\u8fc7 API \u6765\u83b7\u53d6\u6700\u65b0\u7248\u672c\u5f88\u96be\uff0c\u56e0\u4e3a Github API \u4e0d\u5141\u8bb8\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u83b7\u53d6 tag\uff0c \u800c\u4e14\u4e00\u4e9b\u4ed3\u5e93\u4f1a\u66f4\u6362\u5b83\u7684\u7248\u672c\u53f7\u683c\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u8ba4\u4e3a\u6700\u9ad8\u7248\u672c\u53f7\u4ee3\u8868\u7740\u6700\u65b0\u7248\u672c\u3002 \u6211\u4eec\u5fc5\u987b\u83b7\u53d6\u6bcf\u4e2a\u6807\u7b7e\u7684\u63d0\u4ea4\u65e5\u671f\uff0c\u5e76\u68c0\u67e5\u5b83\u662f\u5426\u771f\u7684\u662f\u6700\u8fd1\u63d0\u4ea4\u7684\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u5927\u578b\u4ed3\u5e93\u6765\u8bf4\u901f\u5ea6\u4f1a\u6bd4\u8f83\u6162\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4ed3\u5e93\u53ef\u80fd\u6709\u5f88\u591a\u6807\u7b7e\u3002 \u56e0\u6b64\uff0c lastversion \u4f1a\u7f13\u5b58\u7684 API \u54cd\u5e94\u5185\u5bb9\u4ee5\u63d0\u9ad8\u54cd\u5e94\u901f\u5ea6\uff0c \u5b83\u505a\u4e86\u6709\u6761\u4ef6\u7684 ETag \u9a8c\u8bc1\uff0c\u6839\u636e GitHub API \u7684\u89c4\u5b9a\uff0cETag \u9a8c\u8bc1\u4e0d\u8ba1\u5165\u901f\u7387\u9650\u5236\u3002 \u5728 Linux \u4e0b\u7f13\u5b58\u5185\u5bb9\u5b58\u50a8\u5728 ~/.cache/lastversion \u3002 \u5efa\u8bae \u8bbe\u7f6e\u4f60\u7684 GitHub API token \u3002 \u4ec5\u4ec5\u53ea\u9700\u8981 API token\uff0c\u4f60\u53ef\u4ee5\u53d6\u6d88\u8fd9\u4e2a Token \u7684\u6240\u6709\u6743\u9650\uff0c \u7136\u540e\u4f60\u53ef\u4ee5\u5728 ~/.bashrc \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e0b\u5217\u5185\u5bb9\u6765\u63d0\u5347\u4f60\u7684\u8bf7\u6c42\u901f\u5ea6\u4e0a\u9650\u3002 export GITHUB_API_TOKEN = xxxxxxxxxxxxxxx GITHUB_API_TOKEN \u548c GITHUB_TOKEN \u8fd9\u4e24\u4e2a\u73af\u5883\u53d8\u91cf\u5747\u53ef\u88ab\u8bc6\u522b\uff0c \u4e14\u5f53\u4e24\u8005\u540c\u65f6\u5b58\u5728\u65f6\u4f18\u5148\u4f7f\u7528\u524d\u8005\u3002 \u5bf9\u4e8e GitLab, \u4f60\u53ef\u4ee5\u4f7f\u7528 Personal Access Token : export GITLAB_PA_TOKEN = xxxxxxxxxxxxxxx \u7136\u540e\u8fd0\u884c source ~/.bashrc \uff0c\u4e4b\u540e\uff0c lastversion \u5c06\u4f1a\u4f7f\u7528 TOKEN \u6765\u66f4\u5feb\u5730\u8c03\u7528 API\u3002 \u5728 Python \u6a21\u5757\u4e2d\u7684\u7528\u6cd5 \u00a4 \u4f60\u53ef\u4ee5\u4f7f\u7528 lastversion.has_update(...) \u6765\u67e5\u627e\u67d0\u4e2a\u9879\u76ee\u662f\u5426\u5df2\u7ecf\u6709\u66f4\u65b0\u3002 from lastversion import lastversion latest_version = lastversion . has_update ( repo = \"mautic/mautic\" , current_version = '1.2.3' ) if latest_version : print ( 'Newer Mautic version is available: {} ' . format ( str ( latest_version ))) else : print ( 'No update is available' ) lastversion.has_update(...) \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4ed3\u5e93\u7684 URL\uff0c\u6216\u8005\u5f62\u5982 \u7528\u6237\u540d/\u4ed3\u5e93\u540d \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5f53\u524d\u7248\u672c\u3002 \u5982\u679c\u4f60\u8981\u68c0\u67e5 PyPI \u4e0a\u7684\u9879\u76ee\u7248\u672c\uff0c\u8bf7\u4f7f\u7528\u53c2\u6570 at='pip' \uff0c \u8fd9\u6837\u5c31\u4e0d\u7528\u4f20\u9012\u4e00\u4e2a\u5b8c\u6574\u7684 PyPI \u9879\u76ee\u7684 URL \u4e86\uff0c\u5e76\u4e14\u907f\u514d\u9519\u8bef\u5730\u4ece\u5176\u5b83\u5e73\u53f0\u5982 Github \u4e0a\u83b7\u53d6\u4fe1\u606f\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u68c0\u67e5 Requests \u6700\u65b0\u7684\u7248\u672c\u3002 from lastversion import lastversion latest_version = lastversion . has_update ( repo = \"requests\" , at = 'pip' , current_version = '1.2.3' ) if latest_version : print ( 'Newer Requests library is available: {} ' . format ( str ( latest_version ))) else : print ( 'No update is available' ) \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e0b\u9762\u7684\u4e00\u4e2a\u8fd4\u56de\u503c\uff1a Version \u5bf9\u8c61 False \u5982\u679c\u6ca1\u6709\u66f4\u52a0\u65b0\u7684\u7248\u672c \u4f60\u4e5f\u53ef\u4ee5\u8c03\u7528 lastversion.latest(...) \u51fd\u6570\u6765\u83b7\u53d6\u6700\u65b0\u7248\u672c\u7684\u4fe1\u606f\u3002 from lastversion import lastversion from packaging import version latest_mautic_version = lastversion . latest ( \"mautic/mautic\" , output_format = 'version' , pre_ok = True ) print ( 'Latest Mautic version: {} ' . format ( str ( latest_mautic_version ))) if latest_mautic_version >= version . parse ( '1.8.1' ): print ( 'It is newer' ) \u5982\u679c output_format='version' \uff08\u9ed8\u8ba4\uff09\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a Version \u5bf9\u8c61 \u6216\u8005 none \u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u8fdb\u884c\u5982\u7248\u672c\u6bd4\u8f83\u7b49\u5de5\u4f5c\u3002 \u5982\u679c\u6307\u5b9a\u53c2\u6570 output_format='dict' \uff0c \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a dict \uff08\u5b57\u5178\uff09\u6216 False \uff0c \u5982\u679c\u51fd\u6570\u4ece\u4e0d\u540c\u7684\u5e73\u53f0\uff08\u5982 Github \u548c BitBucket\uff09\u83b7\u53d6\u540c\u4e00\u4e2a\u9879\u76ee\u7684\u7248\u672c\u4fe1\u606f\uff0c \u90a3\u4e48\u5b57\u5178\u7684 Key \uff08\u952e\uff09\u53ef\u80fd\u4f1a\u4e0d\u540c\uff0c \u4f46\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u5b9a\u4f1a\u6709\u4e0b\u5217\u7684 Key \uff08\u952e\uff09\u3002 version \uff1a Version \u5bf9\u8c61\uff0c\u5305\u542b\u88ab\u627e\u5230\u7684\u7248\u672c\uff0c\u5982 1.2.3 \u3002 source \uff1a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u6765\u6e90\u5e73\u53f0, \u5982 github \u6216 gitlab \u3002 tag_date \uff1a datetime \u5bf9\u8c61, \u8868\u793a\u53d1\u5e03\u7684\u65f6\u95f4\uff0c\u5982 2020-12-15 14:41:39 \u3002 from \uff1a\u5b57\u7b26\u4e32, \u9879\u76ee\u7684\u5b8c\u6574 URL\u3002 tag_name \uff1a\u5b57\u7b26\u4e32\uff0c\u7248\u672c\u6807\u7b7e\u540d\u3002 lastversion.latest \u51fd\u6570\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570 repo \uff0c\u4ed3\u5e93\u7684 URL\uff0c\u6216\u8005\u5f62\u5982 \u7528\u6237\u540d/\u4ed3\u5e93\u540d \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 https://github.com/dvershinin/lastversion/issues \u3002 format \uff0c\u5b83\u63a5\u53d7\u7684\u503c\u540c --help \u6240\u8bf4\u660e\u7684\u4e00\u6837\u3002\u4e0d\u8fc7\u5728 Python \u4ee3\u7801\u4e2d\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e3a dict \u3002 pre_ok \uff0c\u5e03\u5c14\u503c\uff0c\u8868\u793a\u9884\u53d1\u5e03\u7248\u672c\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u6700\u65b0\u7248\u672c\u3002 at \uff0c\u8be5\u9879\u76ee\u6240\u5728\u7684\u5e73\u53f0\uff0c\u53d6\u503c\u4ec5\u53ef\u80fd\u4e3a github \uff0c gitlab \uff0c bitbucket \uff0c pip \uff0c hg \uff0c sf \uff0c website-feed \uff0c local \u3002","title":"README ZH CN"},{"location":"README-ZH-CN/#lastversion","text":"English | \u7b80\u4f53\u4e2d\u6587 \u4e00\u4e2a\u8f7b\u5de7\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5e2e\u52a9\u4f60\u67e5\u8be2\u4e00\u4e2a\u9879\u76ee/\u8f6f\u4ef6\u7684\u6700\u65b0\u7248\u672c\u53f7\u53ca\u5404\u79cd\u76f8\u5173\u4fe1\u606f\uff0c\u6bd4\u5982\u4e0b\u8f7d\u94fe\u63a5\u3002 lastversion \u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u7f51\u7ad9\u627e\u5230\u4e00\u4e2a\u9879\u76ee\u7684\u683c\u5f0f\u826f\u597d\u7684\u6700\u65b0\u7684\u7248\u672c\u53f7\u3002 GitHub GitLab BitBucket PyPI Mercurial SourceForge Wikipedia \u4efb\u4f55\u4ee5 RSS/ATOM \u8ba2\u9605\u65b9\u5f0f\u53d1\u5e03\u8f6f\u4ef6\u7f51\u7ad9\u3002","title":"lastversion"},{"location":"README-ZH-CN/#lastversion_1","text":"\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8bb8\u591a\u9879\u76ee\u4f5c\u8005\u7684\u4e00\u4e9b\u505a\u6cd5\u4f1a\u8ba9\u6211\u4eec\u96be\u4ee5\u5bfb\u627e\u4e00\u4e2a\u9879\u76ee\u7684\u6700\u65b0\u7248\u672c\u53ca\u5176\u7248\u672c\u53f7\u3002 \u53d1\u5e03\u4e00\u4e2a\u5019\u9009\u7248\u672c\u7684\u65f6\u5019\u5fd8\u8bb0\u5c06\u5176\u6807\u8bb0\u4e3a\u9884\u53d1\u5e03\u7248\u672c\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6b63\u5f0f\u7248\u672c\u53bb\u53d1\u5e03\u3002\u6bd4\u5982\u7248\u672c\u6807\u7b7e\u4e3a v2.0.1-rc \u4f46\u662f\u5728\u53d1\u5e03\u65f6\u5e76\u672a\u6807\u8bb0\u4e3a\u9884\u53d1\u5e03\u7248\u672c\u3002 \u5728\u7248\u672c\u6807\u7b7e\u4e2d\u52a0\u5165\u65e0\u5173\u7684\u6587\u672c\uff0c\u4f8b\u5982 release-1.2.3 \u6216 name-1.2.3-2019 \uff0c\u6216\u8005\u5176\u5b83\u7c7b\u4f3c\u7684\u6587\u672c\u3002 \u7248\u672c\u6807\u7b7e\u662f\u5426\u5e26\u6709 v \u524d\u7f00\uff1f\u4eca\u5929\u53ef\u80fd\u5e26\uff0c\u4f46\u660e\u5929\u53ef\u80fd\u5c31\u4e0d\u5e26\u4e86\u3002\u6211\u4e5f\u662f\u8fd9\u6837\u7684 :)\u3002 \u5207\u6362\u5230\u53e6\u4e00\u79cd\u7248\u672c\u6807\u7b7e\u683c\u5f0f\uff0c\u4f8b\u5982\u4ece v20150121 \u5207\u6362\u5230 v2.0.1 \u3002 \u4eba\u4e0e\u4eba\u4e4b\u95f4\u96be\u4ee5\u4fdd\u6301\u4e00\u81f4\u3002 \u6709\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u8f6f\u4ef6\u90fd\u6709\u4e00\u4e2a\u56fa\u5b9a\u683c\u5f0f\u7684\u7248\u672c\u53f7\uff0c lastversion \u53ef\u4ee5\u5e2e\u52a9\u4f60\uff0c\u5b83\u53ef\u4ee5\u8ba9\u4f60\u67e5\u8be2\u67d0\u4e2a\u9879\u76ee\u7684\u6700\u65b0\u7248\u672c\u7684\u540c\u65f6\u8fd4\u56de\u4e00\u4e2a\u56fa\u5b9a\u683c\u5f0f\u7684\u7248\u672c\u53f7\uff0c\u5e76\u53ef\u4ee5\u83b7\u53d6\u4e0b\u8f7d\u94fe\u63a5\u7b49\u989d\u5916\u4fe1\u606f\u3002 lastversion \u4e3b\u8981\u7528\u4e8e\u81ea\u52a8\u5316\u811a\u672c\uff0c\u6bd4\u5982\u81ea\u52a8\u66f4\u65b0\u548c\u6301\u7eed\u96c6\u6210\u7b49\u3002 \u5c31\u50cf\u6211\u8fd9\u4e48\u505a lastversion \u4f7f\u7528\u4e86\u7b80\u5355\u7684 AI \u6765\u53c2\u4e0e\u5230\u68c0\u6d4b\u4e2d\uff0c \u6bd4\u5982\u6e05\u7406\u7248\u672c\u53f7\u4e2d\u7684\u65e0\u7528\u4fe1\u606f\uff0c\u6bd4\u5982\u5c06 name-v1.2.3 \u4fee\u6539\u4e3a 1.2.3 \uff0c \u4e5f\u7528\u5b83\u6765\u68c0\u6d4b\u53d1\u5e03\u8005\u662f\u5426\u6df7\u6dc6\u4e86\u6d4b\u8bd5\u7248\u548c\u7a33\u5b9a\u7248\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981 lastversion\uff1f"},{"location":"README-ZH-CN/#_1","text":"lastversion apache/incubator-pagespeed-ngx #> 1.13.35.2 lastversion apache/incubator-pagespeed-ngx -d #> downloaded incubator-pagespeed-ngx-v1.13.35.2-stable.tar.gz lastversion apache/incubator-pagespeed-ngx -d pagespeed.tar.gz #> downloads with chosen filename lastversion https://transmissionbt.com/ #> 3.0","title":"\u7b80\u4ecb"},{"location":"README-ZH-CN/#centosrhel-7-8-amazon-linux-2-lastversion","text":"sudo yum -y install https://extras.getpagespeed.com/release-latest.rpm sudo yum install lastversion","title":"\u5728 CentOS/RHEL 7, 8 \u6216 Amazon Linux 2 \u4e0a\u5b89\u88c5 lastversion"},{"location":"README-ZH-CN/#lastversion_2","text":"\u7528 pip \u5b89\u88c5\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002 pip install lastversion","title":"\u5728\u5176\u5b83\u7cfb\u7edf\u4e0a\u5b89\u88c5 lastversion"},{"location":"README-ZH-CN/#_2","text":"\u4e00\u822c\u6765\u8bf4\uff0c lastversion \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u4e00\u4e2a\u4ed3\u5e93\u7684 URL\uff08\u6216 \u7528\u6237\u540d/\u4ed3\u5e93\u540d\uff09\uff0c\u4f8b\u5982\uff1a lastversion https://github.com/gperftools/gperftools \u4e0e\u4e4b\u7b49\u4ef7\u7684\u547d\u4ee4\u4e3a lastversion gperftools/gperftools \u5982\u679c\u4f60\u60f3\u5077\u61d2\uff0c\u4e0d\u60f3\u590d\u5236\u7c98\u8d34\u9879\u76ee\u7684 URL\uff0c \u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u9879\u76ee\u7684\u540d\u5b57\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u5c06\u4f1a\u4f7f\u7528\u4ed3\u5e93\u641c\u7d22 API\uff08\u901f\u5ea6\u6bd4\u8f83\u6162\uff09\u3002 \u4e0b\u9762\u7684\u8fd9\u6761\u547d\u4ee4\u53ef\u4ee5\u8ba9\u4f60\u77e5\u9053 Linux \u7684\u6700\u65b0\u7248\u672c\u3002 lastversion linux \u6216\u8005\u67e5\u8be2 Wordpress \u7684\u6700\u65b0\u7248\u672c\u3002 lastversion wordpress self \u662f\u4e3b\u53c2\u6570\u4e2d\u7684\u4e00\u4e2a\u7279\u6b8a\u503c\uff0c\u5b83\u53ef\u4ee5\u67e5\u627e lastversion \u7684\u6700\u65b0\u7248\u672c\uff0c\u4f8b\u5982\uff1a lastversion self \u4f60\u53ef\u4ee5\u901a\u8fc7 --help \u67e5\u770b\u548c\u8f93\u51fa\u63a7\u5236\uff08\u884c\u4e3a\uff09\u76f8\u5173\u7684\u9009\u9879\u3002 usage: lastversion [-h] [--pre] [--verbose] [-d [FILENAME]] [--format {version,assets,source,json,tag}] [--assets] [--source] [-gt VER] [-b MAJOR] [--only ONLY] [--filter REGEX] [-su] [--at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local}] [-y] [--version] [action] <repo or URL> Find the latest software release. positional arguments: action Special action to run, e.g. download, install, test <repo or URL> GitHub/GitLab/BitBucket/etc. repository in format owner/name or any URL that belongs to it optional arguments: -h, --help show this help message and exit --pre Include pre-releases in potential versions --verbose Will give you an idea of what is happening under the hood -d [FILENAME], --download [FILENAME] Download with custom filename --format {version,assets,source,json,tag} Output format --assets Returns assets download URLs for last release --source Returns only source URL for last release -gt VER, --newer-than VER Output only if last version is newer than given version -b MAJOR, --major MAJOR, --branch MAJOR Only consider releases of a specific major version, e.g. 2.1.x --only ONLY Only consider releases containing this text. Useful for repos with multiple projects inside --filter REGEX Filters --assets result by a regular expression --having-asset [ASSET] Only consider releases with this asset -su, --shorter-urls A tiny bit shorter URLs produced --at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local} If the repo argument is one word, specifies where to look up the project. The default is via internal lookup or GitHub Search -y, --assumeyes Automatically answer yes for all questions --version show program's version number and exit --format \u9009\u9879\u5c06\u4f1a\u6307\u5b9a\u8f93\u51fa\u7684\u683c\u5f0f\u3002 version \u9ed8\u8ba4\u503c\uff0c\u8f93\u51fa\u683c\u5f0f\u6700\u65b0\u7684\uff0c\u683c\u5f0f\u826f\u597d\u7684\u7248\u672c\u53f7\u3002 assets \u4f1a\u4ee5\u6362\u884c\u5206\u5272\u7684\u6700\u65b0\u7248\u672c\u7684 asset \u7684 URL\uff08\u5982\u679c\u6709\u591a\u4e2a asset \u7684\u8bdd\uff09\uff0c\u5426\u5219\u5c06\u4e3a\u6700\u65b0\u6e90\u7801\u94fe\u63a5\uff08\u901a\u5e38\u4e3a .tar.gz \u6216 .zip\uff09\u3002 source \u5c06\u8f93\u51fa\u6700\u65b0\u6e90\u7801\u7684\u94fe\u63a5\uff08\u901a\u5e38\u4e3a .tar.gz \u6216 .zip\uff09\uff0c\u5373\u4f7f\u6700\u65b0\u7248\u672c\u540c\u65f6\u53d1\u5e03\u4e86\u5176\u5b83\u7684 asset\u3002 json \u6b64\u683c\u5f0f\u53ef\u4ee5\u88ab Python \u7a0b\u5e8f\u5904\u7406\u3002 tag \u53ea\u8f93\u51fa\u6700\u65b0\u7248\u672c\u7684\u6807\u7b7e\u540d\u3002 asset \u5728\u672c\u6587\u662f\u6307\u4e00\u4e2a\u53ef\u4e0b\u8f7d\u7684\u6587\u4ef6\uff0c \u4e00\u822c\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4f8b\u5982\u4e00\u4e2a\u9879\u76ee\u53d1\u5e03\u7684\u65f6\u5019\u4f1a\u8fde\u5e26\u53d1\u5e03\u5404\u4e2a\u5e73\u53f0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u8ba9\u7528\u6237\u65e0\u9700\u7f16\u8bd1\u6e90\u4ee3\u7801\u5373\u53ef\u4f7f\u7528\u3002 \u4f60\u53ef\u4ee5\u67e5\u770b\u6700\u65b0\u7248\u672c\u7684 asset \u6216\u6e90\u4ee3\u7801\u6587\u4ef6\u7684 URL \u901a\u8fc7\u9009\u62e9\u9002\u5f53\u7684 --format flag \u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 --source \u53bb\u4ee3\u66ff --format source \uff0c\u7528 --assets \u4ee3\u66ff --format assets \uff0c\u4f8b\u5982\uff1a lastversion --assets mautic/mautic #> https://github.com/mautic/mautic/archive/2.15.1/mautic-2.15.1.tar.gz \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c lastversion \u4f1a\u6839\u636e\u4e0d\u540c\u7684 OS \u8fc7\u6ee4\u6389\u4e00\u4e9b --assets \u7684\u8f93\u51fa\u3002 \u5728 Linux \u4e0a\u8c01\u9700\u8981 .exe \u5462\uff1f \u4f60\u53ef\u4ee5\u4f7f\u7528 --filter \u6765\u8986\u76d6\u6389\u8fd9\u4e00\u884c\u4e3a\uff0c \u5b83\u4f7f\u7528\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u6839\u636e OS \u8fc7\u6ee4\u6389 asset\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 --filter \u6765\u5339\u914d\u6240\u6709\u7684asset\u3002 \u4f60\u4f60\u53ef\u4ee5\u5f88\u4f18\u96c5\u5730\u4f7f\u7528 --filter \u6765\u4ee3\u66ff grep \u547d\u4ee4\uff0c\u4f8b\u5982\uff1a lastversion --assets --filter win REPO","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"README-ZH-CN/#_3","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 lastversion \u6765\u4e0b\u8f7d\u6700\u65b0\u7248\u672c\u7684 asset \u548c\u6e90\u4ee3\u7801\u3002 \u4e0b\u8f7d\u6700\u65b0\u7684 Mautic \u6e90\u7801\uff1a lastversion mautic/mautic --download \u81ea\u5b9a\u4e49\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\uff08\u53ea\u5bf9\u4e0b\u8f7d\u6e90\u4ee3\u7801\u6709\u6548\u5e76\u4e14\u6b64\u4e3a\u9ed8\u8ba4\u8bbe\u7f6e\uff09\uff1a lastversion mautic/mautic --download mautic.tar.gz \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 lastversion \u8f93\u51fa\u6e90\u4ee3\u7801\u6216\u8005 asset \u7684 URL \u5e76\u4e0b\u8f7d\u5b83\uff0c\u4f8b\u5982\uff1a wget $( lastversion --assets mautic/mautic ) \u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\u4f1a\u4e0b\u8f7d\u6240\u6709\u7684\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u7684 asset\uff0c\u5373\u4e24\u4e2a .zip \u6587\u4ef6\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u80fd\u591f\uff1f \u56e0\u4e3a lastversion \u4f1a\u8f93\u51fa\u5728\u4e24\u4e2a .zip \u6587\u4ef6\u7684 URL \u5e76\u901a\u8fc7\u6362\u884c\u5206\u5272\uff0c wget \u4e5f\u5f88\u806a\u660e\u5730\u4e0b\u8f7d\u6bcf\u884c\u7684 URL\uff0c\u5f88\u795e\u5947\u5427 :)\u3002 \u5982\u679c\u6700\u65b0\u53d1\u5e03\u4e2d\u6ca1\u6709 asset\uff0c\u5219\u4f1a\u76f4\u63a5\u4e0b\u8f7d\u6e90\u4ee3\u7801\u3002 \u5982\u679c\u4f60\u53ea\u60f3\u4e0b\u8f7d\u6e90\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --source \uff0c\u4f8b\u5982\uff1a wget $( lastversion --source mautic/mautic )","title":"\u7528\u4f8b: \u4e0b\u8f7d\u6700\u65b0\u7248\u672c"},{"location":"README-ZH-CN/#_4","text":"lastversion \u8ba4\u4e3a\u6700\u65b0\u7248\u672c\u662f\u7a33\u5b9a\u7248\u672c\u6216\u8005\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u6d4b\u8bd5\u7684\u7248\u672c\u3002 \u5982\u679c\u4f60\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --pre \u5c06\u9884\u53d1\u5e03\u7248\u672c\u4f5c\u4e3a\u6700\u65b0\u7248\u3002 lastversion --pre mautic/mautic #> 2.15.2b0","title":"\u7528\u4f8b: \u83b7\u53d6\u6700\u65b0\u7248\u672c\uff08\u542b\u6d4b\u8bd5\u7248\uff09"},{"location":"README-ZH-CN/#_5","text":"\u4e00\u4e9b\u9879\u76ee\u53ef\u80fd\u4f1a\u4e00\u8d77\u5728\u4e0d\u540c\u7684\u5206\u652f\u4e0a\u53d1\u5e03\u7a33\u5b9a\u7248\u672c\uff0c \u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f PHP\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --major \u53bb\u6307\u5b9a\u67d0\u4e2a\u4e3b\u7248\u672c\uff0c\u4f8b\u5982\uff1a lastversion php/php-src --major 7 .2 \u8fd9\u884c\u547d\u4ee4\u4f1a\u8f93\u51fa\u5f53\u524d\u7684 PHP \u7a33\u5b9a\u7684\u7248\u672c\uff0c\u5176\u7248\u672c\u683c\u5f0f\u4e3a 7.2.x \u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8fd9\u79cd\u7b80\u5355\u7684\u5199\u6cd5\u6765\u8fbe\u5230\u51e0\u4e4e\u76f8\u540c\u7684\u6548\u679c\uff0c\u5373\u5728\u5192\u53f7\u540e\u6307\u5b9a\u4e3b\u7248\u672c\u3002 lastversion php:7.2 \u4f60\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u7248\u672c\uff0c\u4f8b\u5982\uff1a lastversion php:7.2.33 --assets","title":"\u7528\u4f8b: \u83b7\u53d6\u7279\u5b9a\u7684\u5206\u652f/\u7248\u672c"},{"location":"README-ZH-CN/#assets","text":"\u6709\u65f6\u5019\u4e00\u4e2a\u9879\u76ee\u53ef\u80fd\u5df2\u7ecf\u53d1\u5e03\u4e86\u65b0\u7684\u7248\u672c\uff0c\u4f46\u662f\u76f8\u5173\u7684 assets \u5e76\u6ca1\u6709\u7b2c\u4e00\u65f6\u95f4\u53d1\u5e03\uff0c\u6bd4\u5982\u5404\u5927\u5e73\u53f0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 \u5982\u679c\u4f60\u53ea\u60f3\u8981\u67d0\u4e9b assets\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --having-asset \u6765\u5b9e\u73b0\u3002 lastversion telegramdesktop/tdesktop --having-asset \"Linux 64 bit: Binary\" --having-asset \u63a5\u6536\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5339\u914d assets \u7684\u540d\u79f0\u3002 \u83b7\u53d6\u5305\u542b macOS \u5e73\u53f0\u7684\u5b89\u88c5\u7a0b\u5e8f\u7684\u6700\u65b0\u7248\u672c\u53f7\u3002 lastversion telegramdesktop/tdesktop --having-asset \"~\\.dmg $ \" \u5982\u679c\u4f60\u4e0d\u4e3a --having-asset \u6307\u5b9a\u4efb\u4f55\u503c\uff0c\u90a3\u4e48\u5c06\u5339\u914d\u6240\u6709 assets\uff0c\u53ca\u53ea\u8981\u5305\u542b\u4efb\u610f\u7684 assets \u5747\u53ef\u3002 lastversion telegramdesktop/tdesktop --having-asset","title":"\u7528\u4f8b\uff1a\u68c0\u67e5\u662f\u5426\u53d1\u5e03 assets"},{"location":"README-ZH-CN/#_6","text":"\u64cd\u4f5c\u7cfb\u7edf\u901a\u5e38\u4e0d\u4f1a\u5728 Github \u53d1\u5e03\u7248\u672c\uff0c\u4f60\u901a\u5e38\u53ea\u80fd\u901a\u8fc7\u5b98\u65b9\u7f51\u7ad9\u7b49\u6e20\u9053\u624d\u80fd\u83b7\u53d6\uff0c \u4e0d\u8fc7 lastversion \u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002 lastversion \u7684\u505a\u6cd5\u7b80\u5355\u7c97\u66b4\uff0c\u5c06\u5e38\u89c1\u7684\u64cd\u4f5c\u7cfb\u7edf\u540d\u79f0\u53ca\u5176\u5bf9\u5e94\u7684 Wikipedia \u8054\u7cfb\u8d77\u6765\u5e76\u786c\u7f16\u7801\u5230\u7a0b\u5e8f\u4e2d\u3002 lastversion rocky #> 8.4 lastversion windows #> 10.0.19043.1081 lastversion ios #> 14.6 \u4f60\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u67d0\u4e2a\u8f6f\u4ef6/\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b8c\u6574\u7684 Wikipedia \u7684 URL \u6765\u5b8c\u6210\u76f8\u540c\u7684\u64cd\u4f5c\u3002 lastversion https://en.wikipedia.org/wiki/Rocky_Linux #> 8.4","title":"\u7528\u4f8b\uff1a\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u7684\u7248\u672c\u53f7"},{"location":"README-ZH-CN/#nginx-stablemainline","text":"lastversion https://nginx.org --major stable #> 1.16.1 lastversion https://nginx.org --major mainline #> 1.17.9 \u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\u5176\u5b9e\u662f\u68c0\u67e5 hg.nginx.org \uff0c\u5b83\u662f\u4e00\u4e2a Mercurial \u7f51\u7edc\u4ed3\u5e93\u3002 \u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a lastversion https://hg.example.com/project/ Mercurial \u4ed3\u5e93\u73b0\u5728\u6bd4\u8f83\u5c11\u89c1\uff0c lastversion \u652f\u6301\u5b83\u4e3b\u8981\u662f\u4e3a\u4e86 NGINX\u3002","title":"\u7279\u6b8a\u7528\u4f8b: NGINX \u7684\u7a33\u5b9a\u7248\uff08Stable\uff09\u548c\u4e3b\u7ebf\u7248\uff08Mainline\uff09"},{"location":"README-ZH-CN/#pypi","text":"\u5927\u591a\u6570 Python \u7684\u5e93\u548c\u5e94\u7528\u7a0b\u5e8f\u90fd\u6258\u7ba1\u5728 PyPI \u4e0a\u3002\u8981\u83b7\u53d6 PyPI \u4e0a\u9879\u76ee\u7684\u7248\u672c\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u3002 lastversion https://pypi.org/project/requests/ \u5982\u679c\u60a8\u4e0d\u60f3\u5199\u592a\u957f\u7684\u53c2\u6570\uff0c\u53ea\u60f3\u5199\u4ed3\u5e93\u540d\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528 --at pip \uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002 lastversion requests --at pip","title":"\u7279\u6b8a\u7528\u4f8b: \u83b7\u53d6 PyPI \u9879\u76ee"},{"location":"README-ZH-CN/#rpm","text":"\u5982\u679c\u4e00\u4e2a\u9879\u76ee\u63d0\u4f9b .rpm \u8d44\u6e90\u4e14\u4f60\u7684 OS \u53ef\u4ee5\u4f7f\u7528 yum \u6216 dnf \uff0c \u4f60\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u8be5\u9879\u76ee\u7684 RPM\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a sudo lastversion install mailspring \u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\u4ece MailSpring \u7684\u6700\u65b0\u7248\u672c\u4e2d\u627e\u5230 .rpm \u5e76\u4f20\u9012\u7ed9 yum \u6216 dnf \u3002 \u4f60\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7 cron \u5b9e\u73b0\u81ea\u52a8\u66f4\u65b0\uff0c\u8fd9\u5c06\u786e\u4fdd\u4f60\u5728\u67d0\u4e2a\u5305\u4e3a\u6700\u65b0\u7248\u672c\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a @daily /usr/bin/lastversion install mailspring -y 2 >/dev/null \u5982\u679c MailSpring \u7684 Github \u4ed3\u5e93\u53d1\u5e03\u4e86\u4e00\u4e2a\u66f4\u65b0\u7684 .rpm \uff0c \u90a3\u4e48\u8fd9\u4e2a .rpm \u4f1a\u88ab\u81ea\u52a8\u5b89\u88c5\uff0c\u4ee5\u786e\u4fdd\u4f60\u7684\u7248\u672c\u7684\u6700\u65b0\u7684\u3002 \u4f60\u751a\u81f3\u53ef\u4ee5\u5728\u66f4\u65b0\u5b8c\u6bd5\u540e\u6536\u5230\u90ae\u4ef6\u63d0\u9192\uff08cron \u7684\u6807\u51c6\u529f\u80fd\uff09\u3002 \u4e0d\u7528\u8bf4\u90fd\u77e5\u9053\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5bfc\u81f4\u6211\u4eec\u4e0d\u77e5\u9053\u6f5c\u5728\u7684\u7f3a\u5931\u7684\u4f9d\u8d56\u3002 \u6240\u4ee5\uff0c\u53ea\u6709\u5f53 yum \u5e93\u6ca1\u6709\u4f60\u6240\u9700\u8981\u7684\u4e1c\u897f\u7684\u65f6\u5019\u624d\u4f7f\u7528 lastversion install ... \u3002","title":"\u5b89\u88c5 RPM \u8d44\u6e90"},{"location":"README-ZH-CN/#_7","text":"test \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u6392\u9664\u6545\u969c\u6216\u8005\u7b80\u5355\u5730\u683c\u5f0f\u5316\u4e00\u4e2a\u7248\u672c\u6807\u7b7e\u3002 lastversion test 'blah-1.2.3-devel' # > 1.2.3.dev0 lastversion test '1.2.x' # > False (no clear version) lastversion test '1.2.3-rc1' # > 1.2.3rc1","title":"\u6d4b\u8bd5\u300c\u7248\u672c\u89e3\u6790\u5668\u300d"},{"location":"README-ZH-CN/#bash-lastversion","text":"","title":"\u5728 bash \u4e0a\u7528 lastversion \u7f16\u5199\u811a\u672c"},{"location":"README-ZH-CN/#_8","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 lastversion \u8f7b\u677e\u5730\u6bd4\u8f83\u4e24\u4e2a\u7248\u672c\u53f7\u5e76\u8f93\u51fa\u66f4\u52a0\u65b0\u7684\u90a3\u4e2a\u3002 lastversion 1 .2.3 -gt 1 .2.4 #> 1.2.4","title":"\u7248\u672c\u53f7\u6bd4\u8f83"},{"location":"README-ZH-CN/#_9","text":"\u5f53\u4f60\u60f3\u8981\u6784\u5efa\u67d0\u4e2a\u4e0a\u6e38\u7684\u5305\u7684\u65f6\u5019\uff0c\u800c\u4e14\u6b64\u65f6\u4f60\u4e5f\u6709\u8fd9\u4e2a\u5305\u4e0a\u6b21\u6784\u5efa\u65f6\u7684\u7248\u672c\u53f7\uff0c\u90a3\u4e48\u81ea\u52a8\u6784\u5efa\u5c06\u4f1a\u5341\u5206\u5bb9\u6613\u3002 CURRENTLY_BUILT_VER = 1 .2.3 # \u5b58\u50a8\u5728\u5176\u5b83\u4f4d\u7f6e\u6bd4\u5982\u6587\u4ef6\u4e2d LASTVER = $( lastversion repo/owner -gt ${ CURRENTLY_BUILT_VER } ) if [[ $? -eq 0 ]] ; then # \u68c0\u6d4b\u5230\u6700\u65b0\u7248\u672c\uff0c\u89e6\u53d1\u6784\u5efa\u6d41\u7a0b\u3002 # .... fi \u6ce8\u610f\uff0c -gt \u53c2\u6570\u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e bash \u4e2d\u7684 -gt \u6bd4\u8f83\u3002 \u8fd8\u6709\u66f4\u591a\u5185\u5bb9\uff0c\u5982\u679c\u4f60\u60f3\u8ba9\u8fd9\u53d8\u5f97\u66f4\u9760\u8c31\u7684\u8bdd\uff0c \u8bf7\u542c\u6211\u5520\u53e8\uff1a RPM auto-builds with lastversion","title":"\u68c0\u67e5\u66f4\u65b0"},{"location":"README-ZH-CN/#linux","text":"LATEST_KERNEL = $( lastversion linux -gt $( uname -r | cut -d '-' -f 1 )) if [[ $? -eq 0 ]] ; then echo \"I better update my kernel now, because ${ LATEST_KERNEL } is there\" else echo \"My kernel is latest and greatest.\" fi","title":"\u68c0\u67e5\u4f60\u7684 Linux \u662f\u5426\u6709\u66f4\u65b0\u7684\u5185\u6838\u7248\u672c"},{"location":"README-ZH-CN/#_10","text":"\u9000\u51fa\u72b6\u6001\u7801\u662f\u4f20\u9012\u547d\u4ee4\u6267\u884c\u6210\u529f\u4e0e\u5426\u7684\u5e38\u7528\u624b\u6bb5\u3002\u5bf9\u4e8e lastversion \u6765\u8bf4\uff0c \u5982\u679c\u547d\u4ee4\u6267\u884c\u6210\u529f\u5219\u8fd4\u56de 0 \uff0c\u5176\u5b83\u8fd4\u56de\u503c\u7684\u542b\u4e49\uff1a \u8fd4\u56de\u503c 1 \u4ee3\u8868\u4ed3\u5e93\u4e0d\u5b58\u5728\u6216\u8005\u6ca1\u6709\u53d1\u5e03\u8fc7\u7248\u672c\u3002 \u8fd4\u56de\u503c 2 \u4ee3\u8868\u6ca1\u6709\u6bd4 -gt \u6240\u6307\u5b9a\u7684\u7248\u672c\u66f4\u65b0\u7684\u7248\u672c\u3002 \u8fd4\u56de\u503c 3 \u4ee3\u8868 --filter \u8fc7\u6ee4\u6389\u4e86\u6240\u6709\u7684 URL\uff0c\u5373\u6b63\u5219\u8868\u8fbe\u5f0f\u6ca1\u6709\u5339\u914d\u5230\u4efb\u4f55 URL\u3002","title":"\u9000\u51fa\u72b6\u6001\u7801"},{"location":"README-ZH-CN/#_11","text":"\u901a\u8fc7 API \u6765\u83b7\u53d6\u6700\u65b0\u7248\u672c\u5f88\u96be\uff0c\u56e0\u4e3a Github API \u4e0d\u5141\u8bb8\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u83b7\u53d6 tag\uff0c \u800c\u4e14\u4e00\u4e9b\u4ed3\u5e93\u4f1a\u66f4\u6362\u5b83\u7684\u7248\u672c\u53f7\u683c\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u8ba4\u4e3a\u6700\u9ad8\u7248\u672c\u53f7\u4ee3\u8868\u7740\u6700\u65b0\u7248\u672c\u3002 \u6211\u4eec\u5fc5\u987b\u83b7\u53d6\u6bcf\u4e2a\u6807\u7b7e\u7684\u63d0\u4ea4\u65e5\u671f\uff0c\u5e76\u68c0\u67e5\u5b83\u662f\u5426\u771f\u7684\u662f\u6700\u8fd1\u63d0\u4ea4\u7684\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u5927\u578b\u4ed3\u5e93\u6765\u8bf4\u901f\u5ea6\u4f1a\u6bd4\u8f83\u6162\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4ed3\u5e93\u53ef\u80fd\u6709\u5f88\u591a\u6807\u7b7e\u3002 \u56e0\u6b64\uff0c lastversion \u4f1a\u7f13\u5b58\u7684 API \u54cd\u5e94\u5185\u5bb9\u4ee5\u63d0\u9ad8\u54cd\u5e94\u901f\u5ea6\uff0c \u5b83\u505a\u4e86\u6709\u6761\u4ef6\u7684 ETag \u9a8c\u8bc1\uff0c\u6839\u636e GitHub API \u7684\u89c4\u5b9a\uff0cETag \u9a8c\u8bc1\u4e0d\u8ba1\u5165\u901f\u7387\u9650\u5236\u3002 \u5728 Linux \u4e0b\u7f13\u5b58\u5185\u5bb9\u5b58\u50a8\u5728 ~/.cache/lastversion \u3002 \u5efa\u8bae \u8bbe\u7f6e\u4f60\u7684 GitHub API token \u3002 \u4ec5\u4ec5\u53ea\u9700\u8981 API token\uff0c\u4f60\u53ef\u4ee5\u53d6\u6d88\u8fd9\u4e2a Token \u7684\u6240\u6709\u6743\u9650\uff0c \u7136\u540e\u4f60\u53ef\u4ee5\u5728 ~/.bashrc \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e0b\u5217\u5185\u5bb9\u6765\u63d0\u5347\u4f60\u7684\u8bf7\u6c42\u901f\u5ea6\u4e0a\u9650\u3002 export GITHUB_API_TOKEN = xxxxxxxxxxxxxxx GITHUB_API_TOKEN \u548c GITHUB_TOKEN \u8fd9\u4e24\u4e2a\u73af\u5883\u53d8\u91cf\u5747\u53ef\u88ab\u8bc6\u522b\uff0c \u4e14\u5f53\u4e24\u8005\u540c\u65f6\u5b58\u5728\u65f6\u4f18\u5148\u4f7f\u7528\u524d\u8005\u3002 \u5bf9\u4e8e GitLab, \u4f60\u53ef\u4ee5\u4f7f\u7528 Personal Access Token : export GITLAB_PA_TOKEN = xxxxxxxxxxxxxxx \u7136\u540e\u8fd0\u884c source ~/.bashrc \uff0c\u4e4b\u540e\uff0c lastversion \u5c06\u4f1a\u4f7f\u7528 TOKEN \u6765\u66f4\u5feb\u5730\u8c03\u7528 API\u3002","title":"\u5c0f\u8d34\u58eb"},{"location":"README-ZH-CN/#python","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 lastversion.has_update(...) \u6765\u67e5\u627e\u67d0\u4e2a\u9879\u76ee\u662f\u5426\u5df2\u7ecf\u6709\u66f4\u65b0\u3002 from lastversion import lastversion latest_version = lastversion . has_update ( repo = \"mautic/mautic\" , current_version = '1.2.3' ) if latest_version : print ( 'Newer Mautic version is available: {} ' . format ( str ( latest_version ))) else : print ( 'No update is available' ) lastversion.has_update(...) \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4ed3\u5e93\u7684 URL\uff0c\u6216\u8005\u5f62\u5982 \u7528\u6237\u540d/\u4ed3\u5e93\u540d \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5f53\u524d\u7248\u672c\u3002 \u5982\u679c\u4f60\u8981\u68c0\u67e5 PyPI \u4e0a\u7684\u9879\u76ee\u7248\u672c\uff0c\u8bf7\u4f7f\u7528\u53c2\u6570 at='pip' \uff0c \u8fd9\u6837\u5c31\u4e0d\u7528\u4f20\u9012\u4e00\u4e2a\u5b8c\u6574\u7684 PyPI \u9879\u76ee\u7684 URL \u4e86\uff0c\u5e76\u4e14\u907f\u514d\u9519\u8bef\u5730\u4ece\u5176\u5b83\u5e73\u53f0\u5982 Github \u4e0a\u83b7\u53d6\u4fe1\u606f\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u68c0\u67e5 Requests \u6700\u65b0\u7684\u7248\u672c\u3002 from lastversion import lastversion latest_version = lastversion . has_update ( repo = \"requests\" , at = 'pip' , current_version = '1.2.3' ) if latest_version : print ( 'Newer Requests library is available: {} ' . format ( str ( latest_version ))) else : print ( 'No update is available' ) \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e0b\u9762\u7684\u4e00\u4e2a\u8fd4\u56de\u503c\uff1a Version \u5bf9\u8c61 False \u5982\u679c\u6ca1\u6709\u66f4\u52a0\u65b0\u7684\u7248\u672c \u4f60\u4e5f\u53ef\u4ee5\u8c03\u7528 lastversion.latest(...) \u51fd\u6570\u6765\u83b7\u53d6\u6700\u65b0\u7248\u672c\u7684\u4fe1\u606f\u3002 from lastversion import lastversion from packaging import version latest_mautic_version = lastversion . latest ( \"mautic/mautic\" , output_format = 'version' , pre_ok = True ) print ( 'Latest Mautic version: {} ' . format ( str ( latest_mautic_version ))) if latest_mautic_version >= version . parse ( '1.8.1' ): print ( 'It is newer' ) \u5982\u679c output_format='version' \uff08\u9ed8\u8ba4\uff09\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a Version \u5bf9\u8c61 \u6216\u8005 none \u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u8fdb\u884c\u5982\u7248\u672c\u6bd4\u8f83\u7b49\u5de5\u4f5c\u3002 \u5982\u679c\u6307\u5b9a\u53c2\u6570 output_format='dict' \uff0c \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a dict \uff08\u5b57\u5178\uff09\u6216 False \uff0c \u5982\u679c\u51fd\u6570\u4ece\u4e0d\u540c\u7684\u5e73\u53f0\uff08\u5982 Github \u548c BitBucket\uff09\u83b7\u53d6\u540c\u4e00\u4e2a\u9879\u76ee\u7684\u7248\u672c\u4fe1\u606f\uff0c \u90a3\u4e48\u5b57\u5178\u7684 Key \uff08\u952e\uff09\u53ef\u80fd\u4f1a\u4e0d\u540c\uff0c \u4f46\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u5b9a\u4f1a\u6709\u4e0b\u5217\u7684 Key \uff08\u952e\uff09\u3002 version \uff1a Version \u5bf9\u8c61\uff0c\u5305\u542b\u88ab\u627e\u5230\u7684\u7248\u672c\uff0c\u5982 1.2.3 \u3002 source \uff1a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u6765\u6e90\u5e73\u53f0, \u5982 github \u6216 gitlab \u3002 tag_date \uff1a datetime \u5bf9\u8c61, \u8868\u793a\u53d1\u5e03\u7684\u65f6\u95f4\uff0c\u5982 2020-12-15 14:41:39 \u3002 from \uff1a\u5b57\u7b26\u4e32, \u9879\u76ee\u7684\u5b8c\u6574 URL\u3002 tag_name \uff1a\u5b57\u7b26\u4e32\uff0c\u7248\u672c\u6807\u7b7e\u540d\u3002 lastversion.latest \u51fd\u6570\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570 repo \uff0c\u4ed3\u5e93\u7684 URL\uff0c\u6216\u8005\u5f62\u5982 \u7528\u6237\u540d/\u4ed3\u5e93\u540d \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 https://github.com/dvershinin/lastversion/issues \u3002 format \uff0c\u5b83\u63a5\u53d7\u7684\u503c\u540c --help \u6240\u8bf4\u660e\u7684\u4e00\u6837\u3002\u4e0d\u8fc7\u5728 Python \u4ee3\u7801\u4e2d\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e3a dict \u3002 pre_ok \uff0c\u5e03\u5c14\u503c\uff0c\u8868\u793a\u9884\u53d1\u5e03\u7248\u672c\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u6700\u65b0\u7248\u672c\u3002 at \uff0c\u8be5\u9879\u76ee\u6240\u5728\u7684\u5e73\u53f0\uff0c\u53d6\u503c\u4ec5\u53ef\u80fd\u4e3a github \uff0c gitlab \uff0c bitbucket \uff0c pip \uff0c hg \uff0c sf \uff0c website-feed \uff0c local \u3002","title":"\u5728 Python \u6a21\u5757\u4e2d\u7684\u7528\u6cd5"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. [3.0.0] - 2023-06-22 \u00a4 Changed \u00a4 Python 2 no longer supported Fixed \u00a4 Wrong version parsing with number in name #102 90+ versions that look like dates triggered pre-release detection [2.4.15] - 2023-05-08 \u00a4 Fixed \u00a4 Pinned some dependency versions to avoid breakage Removed unnecessary warnings [2.4.14] - 2023-04-24 \u00a4 Fixed \u00a4 Fix URL encoded tag names #99 [2.4.13] - 2023-03-28 \u00a4 Fixed \u00a4 Downloading GitLab --assets is now possible Fixed --exclude option not working Fixes detecting of some pre-releases [2.4.12] - 2023-03-11 \u00a4 Fixed \u00a4 Fixes an issue where release feed contains identical tag versions #92 [2.4.11] - 2023-02-16 \u00a4 Fixed \u00a4 Don't treat 0.0.90+ as pre-releases #90 [2.4.10] - 2023-01-24 \u00a4 Fixed \u00a4 Fatal failure regression from release 2.4.9 on some packaging library versions More intelligent search in GitLab tags [2.4.9] - 2023-01-22 \u00a4 Added \u00a4 New --even switch to target software that uses odd/even versioning where even is stable Fixed \u00a4 Micro-releases 90+ are treated as non-stable versions (old Linux software) [2.4.8] - 2022-12-05 \u00a4 Fixed \u00a4 Better detection of x86_64 arch for install command [2.4.7] - 2022-11-10 \u00a4 Added \u00a4 Added quictls/openssl repo shortcut Updated Accept: API header reflecting current state of GitHub docs Fixed \u00a4 Use stars instead of best-match for GitHub repo search as it seems more consistent Minor optimization to GitHub repositories search [2.4.6] - 2022-10-26 \u00a4 Added \u00a4 More licenses for matching to RPM license field #74 Added quictls/openssl for special version handling [2.4.5] - 2022-05-22 \u00a4 Added \u00a4 Officially supporting Gitea repos #73 [2.4.4] - 2022-05-08 \u00a4 Added \u00a4 Allow extracting version from an arbitrary string (CLI) [2.4.3] - 2022-04-29 \u00a4 Fixed \u00a4 Allow using --at with any non-URL repository specifier [2.4.2] - 2022-04-10 \u00a4 Fixed \u00a4 Detection of self-hosted GitLab via gitlab. subdomain [2.4.1] - 2022-04-10 \u00a4 Fixed \u00a4 Fixed regression from previous release where --tag CLI failed [2.4.0] - 2022-04-09 \u00a4 Added \u00a4 Added better semantic versioning support via --sem option [2.3.0] - 2022-04-05 \u00a4 Fixed \u00a4 Removed unnecessary API calls, performance improvement [2.2.2] - 2022-03-18 \u00a4 Fixed \u00a4 rpmspec_license failed output when no license [2.2.1] - 2022-02-27 \u00a4 Added \u00a4 --only now accepts regex via ~ prefix and negation via ! prefix new --exclude argument allows for negative filtering dict or json output: added rpmspec_license field [2.2.0] - 2022-02-27 \u00a4 Added \u00a4 unzip command to extract project directly to the current directory [2.1.0] - 2022-02-23 \u00a4 Added \u00a4 Several extra repo shortcuts: kodi for Kodi, sles for SUSE Enterprise Refactored code so that caching can be better used Extra detection of beta via preview and early-access delimiters --at wordpress for WordPress plugins [2.0.1] - 2021-10-28 \u00a4 Fixed \u00a4 GitHub has empty releases.atom in tag-only repos #63, #65 Fix for some repos where releases.atom contains old releases only [2.0.0] - 2021-10-21 \u00a4 Changed \u00a4 The \"install\" action operates against releases with respective assets #60 Fixed \u00a4 The releases.atom w/o authorization, fixes behavior of GitHub returning empty feeds [1.6.0] - 2021-09-04 \u00a4 Added \u00a4 For .spec file updates, look for URL: tag as well, to use as repo argument --at system will query last version from package managers Various performance optimizations [1.5.1] - 2021-08-07 \u00a4 Added \u00a4 --having-asset accepts regular expression if tilde prepended For one-word repo argument, check word/word official GitHub repo first, then search [1.5.0] - 2021-08-06 \u00a4 Added \u00a4 New --having-asset switch to consider only formal releases with given asset name Fixed \u00a4 Unnecessary parsing of repo argument as version (performance) [1.4.5] - 2021-07-16 \u00a4 Fixed \u00a4 Fixed RPM builds rpmlint changelog-time-in-future by having changelog in UTC [1.4.4] - 2021-07-16 \u00a4 Added \u00a4 Print latest version from .spec file every time [1.4.3] - 2021-07-16 \u00a4 Fixed \u00a4 Fixed installation on some systems [1.4.2] - 2021-07-15 \u00a4 Added \u00a4 Experimental: updating .spec files for RPM auto-builds #26 [1.4.1] - 2021-07-08 \u00a4 Fixed \u00a4 --download option works for asset downloads, as long as there is one asset [1.4.0] - 2021-06-27 \u00a4 Added \u00a4 Now it's easy get OS versions. Just run lastversion ubuntu or something [1.3.5] - 2021-06-09 \u00a4 Added \u00a4 Ability to parse/check Helm chart repository metadata #50 Fixed \u00a4 Ensure the --only switch works consistently across different project hosting [1.3.4] - 2021-05-25 \u00a4 Added \u00a4 Arbitrary versions comparison in CLI: lastversion 1.2.3 -gt 1.2.4 lastversion --version reports available updates for lastversion Clean up cancelled download on Ctrl+C [1.3.3] - 2021-02-03 \u00a4 Added \u00a4 More requests logging in --verbose mode Log failed feed parsing Raising BadProjectError from GraphQL find method if repo arg is invalid Fixed \u00a4 Work around GitHub servers' inconsistency with feed redirects #44 Using all tags in GraphQL find method, instead of annotated only #44 [1.3.2] - 2021-01-12 \u00a4 Fixed \u00a4 GraphQL method for finding release tags was not reliable on repos with tags having no tagger field Strip all extraneous alphanumerics from beginning of tags to improve detection [1.3.1] - 2021-01-17 \u00a4 Added \u00a4 output_format='dict for the lastversion.latest() function Honour GITHUB_TOKEN env var in addition to GITHUB_API_TOKEN [1.3.0] - 2021-01-16 \u00a4 Added \u00a4 --at switch (and function argument) to explicitly specify project provider PyPI support [1.2.6] - 2021-01-13 \u00a4 Fixed \u00a4 Ensure compatibility with older python packaging module found in CentOS 7 [1.2.5] - 2021-01-12 \u00a4 Fixed \u00a4 Version checks and output for odd non-semantic tags, e.g. 1.1.1i (OpenSSL) [1.2.4] - 2020-12-19 \u00a4 Fixed \u00a4 Fixed waiting API quota reinstatement Cache info about non-existent GitHub repositories [1.2.3] - 2020-10-02 \u00a4 Fixed \u00a4 Fixed lastversion URL introduced by regression from 1.2.1 [1.2.2] - 2020-09-29 \u00a4 Fixed \u00a4 --format json and --format assets work for Non-GitHub projects [1.2.1] - 2020-09-29 \u00a4 Added \u00a4 lastversion repo:branch syntax, e.g. lastversion php:7.2 or lastversion nginx:mainline Fixed \u00a4 require feedparser version that works with Python 2 [1.2.0] - 2020-09-06 \u00a4 Added \u00a4 New switch --only allows filtering projects in repos with multiple actual projects Ability to sniff version from a software website which publishes releases in RSS/ATOM feeds #23 Ability to sniff version by discovering GitHub repository links on a software website #23 Fixed \u00a4 No longer messing with root logger, playing safe as a library (opt-in behavior when used as module) [1.1.8] - 2020-08-13 \u00a4 Added \u00a4 Fixed up --major constraint to work more correctly Use GraphQL API (GitHub) when deep searching tags is required (faster --major ) Paginate across tags when a release matching constraints is not present in the feed (GitHub) #12 Simple Python interface for update checks: lastversion.has_update(repo, current_version) Various fixes [1.1.7] - 2020-08-07 \u00a4 Added \u00a4 Aggregate older tags, up to one year, for better latest release detection (feed only) [1.1.6] - 2020-07-18 \u00a4 Added \u00a4 General improvements for releases detection SourceForge projects support [1.1.5] - 2020-05-04 \u00a4 Added \u00a4 Better detection of post-releases, e.g. Magento 2.3.4-p2 is the latest stable release for the --major 2.3.4 Added new --format tag switch to get just the latest release's tag name. Proven to be useful in some cases [1.1.4] - 2020-04-23 \u00a4 Fixed \u00a4 Fixed detecting non-GitHub repos and known URLs Improved RPM install by checking with RPM db and avoiding unnecessary downloads absent updates [1.1.3] - 2020-04-15 \u00a4 Fixed \u00a4 Show error when no repo found (no results from search) Added spec_tag_no_prefix to JSON output Returning Null for license when it doesn't exist at release tag [1.1.2] - 2020-04-04 \u00a4 Fixed \u00a4 Require requests>=2.6.1 to compensate for cachecontrol bug [1.1.1] - 2020-03-31 \u00a4 Fixed \u00a4 Do not output progressbar when downloading and no TTY available, e.g. for log output [1.1.0] - 2020-03-24 \u00a4 Added \u00a4 Install action Progressbar for download action, when download size is known [1.0.1] - 2020-03-23 \u00a4 Fixed \u00a4 Compatibility with older PyYAML [1.0.0] - 2020-03-23 \u00a4 Changed \u00a4 BREAKING release for Python consumers: The latest Python function now returns Version object instead of string, by default Added \u00a4 test command to see how a given tag would be parsed as version: lastversion test 'release-3_0_2' Limited GitLab support Limited Mercurial web repos support Limited BitBucket support Use feeds where available, thus much, much faster while still precise Ability to pass .yml with repo: value inside. Other elements are merged into --format json output. More on the wiki on how useful it is","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"changelog/#300-2023-06-22","text":"","title":"[3.0.0] - 2023-06-22"},{"location":"changelog/#changed","text":"Python 2 no longer supported","title":"Changed"},{"location":"changelog/#fixed","text":"Wrong version parsing with number in name #102 90+ versions that look like dates triggered pre-release detection","title":"Fixed"},{"location":"changelog/#2415-2023-05-08","text":"","title":"[2.4.15] - 2023-05-08"},{"location":"changelog/#fixed_1","text":"Pinned some dependency versions to avoid breakage Removed unnecessary warnings","title":"Fixed"},{"location":"changelog/#2414-2023-04-24","text":"","title":"[2.4.14] - 2023-04-24"},{"location":"changelog/#fixed_2","text":"Fix URL encoded tag names #99","title":"Fixed"},{"location":"changelog/#2413-2023-03-28","text":"","title":"[2.4.13] - 2023-03-28"},{"location":"changelog/#fixed_3","text":"Downloading GitLab --assets is now possible Fixed --exclude option not working Fixes detecting of some pre-releases","title":"Fixed"},{"location":"changelog/#2412-2023-03-11","text":"","title":"[2.4.12] - 2023-03-11"},{"location":"changelog/#fixed_4","text":"Fixes an issue where release feed contains identical tag versions #92","title":"Fixed"},{"location":"changelog/#2411-2023-02-16","text":"","title":"[2.4.11] - 2023-02-16"},{"location":"changelog/#fixed_5","text":"Don't treat 0.0.90+ as pre-releases #90","title":"Fixed"},{"location":"changelog/#2410-2023-01-24","text":"","title":"[2.4.10] - 2023-01-24"},{"location":"changelog/#fixed_6","text":"Fatal failure regression from release 2.4.9 on some packaging library versions More intelligent search in GitLab tags","title":"Fixed"},{"location":"changelog/#249-2023-01-22","text":"","title":"[2.4.9] - 2023-01-22"},{"location":"changelog/#added","text":"New --even switch to target software that uses odd/even versioning where even is stable","title":"Added"},{"location":"changelog/#fixed_7","text":"Micro-releases 90+ are treated as non-stable versions (old Linux software)","title":"Fixed"},{"location":"changelog/#248-2022-12-05","text":"","title":"[2.4.8] - 2022-12-05"},{"location":"changelog/#fixed_8","text":"Better detection of x86_64 arch for install command","title":"Fixed"},{"location":"changelog/#247-2022-11-10","text":"","title":"[2.4.7] - 2022-11-10"},{"location":"changelog/#added_1","text":"Added quictls/openssl repo shortcut Updated Accept: API header reflecting current state of GitHub docs","title":"Added"},{"location":"changelog/#fixed_9","text":"Use stars instead of best-match for GitHub repo search as it seems more consistent Minor optimization to GitHub repositories search","title":"Fixed"},{"location":"changelog/#246-2022-10-26","text":"","title":"[2.4.6] - 2022-10-26"},{"location":"changelog/#added_2","text":"More licenses for matching to RPM license field #74 Added quictls/openssl for special version handling","title":"Added"},{"location":"changelog/#245-2022-05-22","text":"","title":"[2.4.5] - 2022-05-22"},{"location":"changelog/#added_3","text":"Officially supporting Gitea repos #73","title":"Added"},{"location":"changelog/#244-2022-05-08","text":"","title":"[2.4.4] - 2022-05-08"},{"location":"changelog/#added_4","text":"Allow extracting version from an arbitrary string (CLI)","title":"Added"},{"location":"changelog/#243-2022-04-29","text":"","title":"[2.4.3] - 2022-04-29"},{"location":"changelog/#fixed_10","text":"Allow using --at with any non-URL repository specifier","title":"Fixed"},{"location":"changelog/#242-2022-04-10","text":"","title":"[2.4.2] - 2022-04-10"},{"location":"changelog/#fixed_11","text":"Detection of self-hosted GitLab via gitlab. subdomain","title":"Fixed"},{"location":"changelog/#241-2022-04-10","text":"","title":"[2.4.1] - 2022-04-10"},{"location":"changelog/#fixed_12","text":"Fixed regression from previous release where --tag CLI failed","title":"Fixed"},{"location":"changelog/#240-2022-04-09","text":"","title":"[2.4.0] - 2022-04-09"},{"location":"changelog/#added_5","text":"Added better semantic versioning support via --sem option","title":"Added"},{"location":"changelog/#230-2022-04-05","text":"","title":"[2.3.0] - 2022-04-05"},{"location":"changelog/#fixed_13","text":"Removed unnecessary API calls, performance improvement","title":"Fixed"},{"location":"changelog/#222-2022-03-18","text":"","title":"[2.2.2] - 2022-03-18"},{"location":"changelog/#fixed_14","text":"rpmspec_license failed output when no license","title":"Fixed"},{"location":"changelog/#221-2022-02-27","text":"","title":"[2.2.1] - 2022-02-27"},{"location":"changelog/#added_6","text":"--only now accepts regex via ~ prefix and negation via ! prefix new --exclude argument allows for negative filtering dict or json output: added rpmspec_license field","title":"Added"},{"location":"changelog/#220-2022-02-27","text":"","title":"[2.2.0] - 2022-02-27"},{"location":"changelog/#added_7","text":"unzip command to extract project directly to the current directory","title":"Added"},{"location":"changelog/#210-2022-02-23","text":"","title":"[2.1.0] - 2022-02-23"},{"location":"changelog/#added_8","text":"Several extra repo shortcuts: kodi for Kodi, sles for SUSE Enterprise Refactored code so that caching can be better used Extra detection of beta via preview and early-access delimiters --at wordpress for WordPress plugins","title":"Added"},{"location":"changelog/#201-2021-10-28","text":"","title":"[2.0.1] - 2021-10-28"},{"location":"changelog/#fixed_15","text":"GitHub has empty releases.atom in tag-only repos #63, #65 Fix for some repos where releases.atom contains old releases only","title":"Fixed"},{"location":"changelog/#200-2021-10-21","text":"","title":"[2.0.0] - 2021-10-21"},{"location":"changelog/#changed_1","text":"The \"install\" action operates against releases with respective assets #60","title":"Changed"},{"location":"changelog/#fixed_16","text":"The releases.atom w/o authorization, fixes behavior of GitHub returning empty feeds","title":"Fixed"},{"location":"changelog/#160-2021-09-04","text":"","title":"[1.6.0] - 2021-09-04"},{"location":"changelog/#added_9","text":"For .spec file updates, look for URL: tag as well, to use as repo argument --at system will query last version from package managers Various performance optimizations","title":"Added"},{"location":"changelog/#151-2021-08-07","text":"","title":"[1.5.1] - 2021-08-07"},{"location":"changelog/#added_10","text":"--having-asset accepts regular expression if tilde prepended For one-word repo argument, check word/word official GitHub repo first, then search","title":"Added"},{"location":"changelog/#150-2021-08-06","text":"","title":"[1.5.0] - 2021-08-06"},{"location":"changelog/#added_11","text":"New --having-asset switch to consider only formal releases with given asset name","title":"Added"},{"location":"changelog/#fixed_17","text":"Unnecessary parsing of repo argument as version (performance)","title":"Fixed"},{"location":"changelog/#145-2021-07-16","text":"","title":"[1.4.5] - 2021-07-16"},{"location":"changelog/#fixed_18","text":"Fixed RPM builds rpmlint changelog-time-in-future by having changelog in UTC","title":"Fixed"},{"location":"changelog/#144-2021-07-16","text":"","title":"[1.4.4] - 2021-07-16"},{"location":"changelog/#added_12","text":"Print latest version from .spec file every time","title":"Added"},{"location":"changelog/#143-2021-07-16","text":"","title":"[1.4.3] - 2021-07-16"},{"location":"changelog/#fixed_19","text":"Fixed installation on some systems","title":"Fixed"},{"location":"changelog/#142-2021-07-15","text":"","title":"[1.4.2] - 2021-07-15"},{"location":"changelog/#added_13","text":"Experimental: updating .spec files for RPM auto-builds #26","title":"Added"},{"location":"changelog/#141-2021-07-08","text":"","title":"[1.4.1] - 2021-07-08"},{"location":"changelog/#fixed_20","text":"--download option works for asset downloads, as long as there is one asset","title":"Fixed"},{"location":"changelog/#140-2021-06-27","text":"","title":"[1.4.0] - 2021-06-27"},{"location":"changelog/#added_14","text":"Now it's easy get OS versions. Just run lastversion ubuntu or something","title":"Added"},{"location":"changelog/#135-2021-06-09","text":"","title":"[1.3.5] - 2021-06-09"},{"location":"changelog/#added_15","text":"Ability to parse/check Helm chart repository metadata #50","title":"Added"},{"location":"changelog/#fixed_21","text":"Ensure the --only switch works consistently across different project hosting","title":"Fixed"},{"location":"changelog/#134-2021-05-25","text":"","title":"[1.3.4] - 2021-05-25"},{"location":"changelog/#added_16","text":"Arbitrary versions comparison in CLI: lastversion 1.2.3 -gt 1.2.4 lastversion --version reports available updates for lastversion Clean up cancelled download on Ctrl+C","title":"Added"},{"location":"changelog/#133-2021-02-03","text":"","title":"[1.3.3] - 2021-02-03"},{"location":"changelog/#added_17","text":"More requests logging in --verbose mode Log failed feed parsing Raising BadProjectError from GraphQL find method if repo arg is invalid","title":"Added"},{"location":"changelog/#fixed_22","text":"Work around GitHub servers' inconsistency with feed redirects #44 Using all tags in GraphQL find method, instead of annotated only #44","title":"Fixed"},{"location":"changelog/#132-2021-01-12","text":"","title":"[1.3.2] - 2021-01-12"},{"location":"changelog/#fixed_23","text":"GraphQL method for finding release tags was not reliable on repos with tags having no tagger field Strip all extraneous alphanumerics from beginning of tags to improve detection","title":"Fixed"},{"location":"changelog/#131-2021-01-17","text":"","title":"[1.3.1] - 2021-01-17"},{"location":"changelog/#added_18","text":"output_format='dict for the lastversion.latest() function Honour GITHUB_TOKEN env var in addition to GITHUB_API_TOKEN","title":"Added"},{"location":"changelog/#130-2021-01-16","text":"","title":"[1.3.0] - 2021-01-16"},{"location":"changelog/#added_19","text":"--at switch (and function argument) to explicitly specify project provider PyPI support","title":"Added"},{"location":"changelog/#126-2021-01-13","text":"","title":"[1.2.6] - 2021-01-13"},{"location":"changelog/#fixed_24","text":"Ensure compatibility with older python packaging module found in CentOS 7","title":"Fixed"},{"location":"changelog/#125-2021-01-12","text":"","title":"[1.2.5] - 2021-01-12"},{"location":"changelog/#fixed_25","text":"Version checks and output for odd non-semantic tags, e.g. 1.1.1i (OpenSSL)","title":"Fixed"},{"location":"changelog/#124-2020-12-19","text":"","title":"[1.2.4] - 2020-12-19"},{"location":"changelog/#fixed_26","text":"Fixed waiting API quota reinstatement Cache info about non-existent GitHub repositories","title":"Fixed"},{"location":"changelog/#123-2020-10-02","text":"","title":"[1.2.3] - 2020-10-02"},{"location":"changelog/#fixed_27","text":"Fixed lastversion URL introduced by regression from 1.2.1","title":"Fixed"},{"location":"changelog/#122-2020-09-29","text":"","title":"[1.2.2] - 2020-09-29"},{"location":"changelog/#fixed_28","text":"--format json and --format assets work for Non-GitHub projects","title":"Fixed"},{"location":"changelog/#121-2020-09-29","text":"","title":"[1.2.1] - 2020-09-29"},{"location":"changelog/#added_20","text":"lastversion repo:branch syntax, e.g. lastversion php:7.2 or lastversion nginx:mainline","title":"Added"},{"location":"changelog/#fixed_29","text":"require feedparser version that works with Python 2","title":"Fixed"},{"location":"changelog/#120-2020-09-06","text":"","title":"[1.2.0] - 2020-09-06"},{"location":"changelog/#added_21","text":"New switch --only allows filtering projects in repos with multiple actual projects Ability to sniff version from a software website which publishes releases in RSS/ATOM feeds #23 Ability to sniff version by discovering GitHub repository links on a software website #23","title":"Added"},{"location":"changelog/#fixed_30","text":"No longer messing with root logger, playing safe as a library (opt-in behavior when used as module)","title":"Fixed"},{"location":"changelog/#118-2020-08-13","text":"","title":"[1.1.8] - 2020-08-13"},{"location":"changelog/#added_22","text":"Fixed up --major constraint to work more correctly Use GraphQL API (GitHub) when deep searching tags is required (faster --major ) Paginate across tags when a release matching constraints is not present in the feed (GitHub) #12 Simple Python interface for update checks: lastversion.has_update(repo, current_version) Various fixes","title":"Added"},{"location":"changelog/#117-2020-08-07","text":"","title":"[1.1.7] - 2020-08-07"},{"location":"changelog/#added_23","text":"Aggregate older tags, up to one year, for better latest release detection (feed only)","title":"Added"},{"location":"changelog/#116-2020-07-18","text":"","title":"[1.1.6] - 2020-07-18"},{"location":"changelog/#added_24","text":"General improvements for releases detection SourceForge projects support","title":"Added"},{"location":"changelog/#115-2020-05-04","text":"","title":"[1.1.5] - 2020-05-04"},{"location":"changelog/#added_25","text":"Better detection of post-releases, e.g. Magento 2.3.4-p2 is the latest stable release for the --major 2.3.4 Added new --format tag switch to get just the latest release's tag name. Proven to be useful in some cases","title":"Added"},{"location":"changelog/#114-2020-04-23","text":"","title":"[1.1.4] - 2020-04-23"},{"location":"changelog/#fixed_31","text":"Fixed detecting non-GitHub repos and known URLs Improved RPM install by checking with RPM db and avoiding unnecessary downloads absent updates","title":"Fixed"},{"location":"changelog/#113-2020-04-15","text":"","title":"[1.1.3] - 2020-04-15"},{"location":"changelog/#fixed_32","text":"Show error when no repo found (no results from search) Added spec_tag_no_prefix to JSON output Returning Null for license when it doesn't exist at release tag","title":"Fixed"},{"location":"changelog/#112-2020-04-04","text":"","title":"[1.1.2] - 2020-04-04"},{"location":"changelog/#fixed_33","text":"Require requests>=2.6.1 to compensate for cachecontrol bug","title":"Fixed"},{"location":"changelog/#111-2020-03-31","text":"","title":"[1.1.1] - 2020-03-31"},{"location":"changelog/#fixed_34","text":"Do not output progressbar when downloading and no TTY available, e.g. for log output","title":"Fixed"},{"location":"changelog/#110-2020-03-24","text":"","title":"[1.1.0] - 2020-03-24"},{"location":"changelog/#added_26","text":"Install action Progressbar for download action, when download size is known","title":"Added"},{"location":"changelog/#101-2020-03-23","text":"","title":"[1.0.1] - 2020-03-23"},{"location":"changelog/#fixed_35","text":"Compatibility with older PyYAML","title":"Fixed"},{"location":"changelog/#100-2020-03-23","text":"","title":"[1.0.0] - 2020-03-23"},{"location":"changelog/#changed_2","text":"BREAKING release for Python consumers: The latest Python function now returns Version object instead of string, by default","title":"Changed"},{"location":"changelog/#added_27","text":"test command to see how a given tag would be parsed as version: lastversion test 'release-3_0_2' Limited GitLab support Limited Mercurial web repos support Limited BitBucket support Use feeds where available, thus much, much faster while still precise Ability to pass .yml with repo: value inside. Other elements are merged into --format json output. More on the wiki on how useful it is","title":"Added"},{"location":"license/","text":"BSD 2-Clause License Copyright (c) 2019, Danila Vershinin All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"spec-preparing/","text":"lastversion is capable of directly updating RPM .spec files with the latest release version: lastversion foo.spec It will update your .spec file with the newer project version, if available. This feature allows creating an easy automation for rebuilding package updates. You can set up a simple build pipeline via e.g. cron, to automatically build packages for new versions. In general, you may not have to do any special changes in your .spec files. lastversion will look at the URL: tag and check the latest release from that location, and update the Version: tag if a more recent version is found. However, if you are working with projects hosted on GitHub, it is highly recommended to prepare your .spec files in a special way. The recommended changes below will allow lastversion to work with your .spec file and discover the GitHub repository in question, the current version and release tag. The release tag is very important to be part of your build, because it helps to avoid breaking builds. lastversion-friendly spec changes \u00a4 There are only a couple of modifications you must make to your .spec file in order to make it lastversion friendly. For GitHub projects \u00a4 The header of the .spec file must have the following macros defined: %global upstream_github <repository owner> %global lastversion_tag x %global lastversion_dir x The %upstream_github is static and defines the owner of a GitHub repository, e.g. for google/brotli repository, you will have: %global upstream_github brotli lastversion constructs the complete GitHub repo name by looking at the values of the upstream_github macro and the Name: tag. If the package name and GitHub repository Name: of your package do not match, then specify another global with the GitHub repo name: %global upstream_name brotli The lastversion_tag and lastversion_dir macros are not static. These globals, as well as Version: tag, are be updated by lastversion with the proper values for the last release, whenever you run lastversion foo.spec . The URL: and Source0: tags of your spec file must be put to the following form: %global upstream_github <repository owner> %global lastversion_tag x %global lastversion_dir x Name: <name> URL: https://github.com/%{upstream_github}/%{name} Source0: %{url}/archive/%{lastversion_tag}/%{name}-%{lastversion_tag}.tar.gz Wherever in the .spec file you unpack the tarball and have to reference the extracted directory name, use %{lastversion_dir} . Example: %global upstream_github <repository owner> %global lastversion_tag x %global lastversion_dir x Name: <name> URL: https://github.com/%{upstream_github}/%{name} Source0: %{url}/archive/%{lastversion_tag}/%{name}-%{lastversion_tag}.tar.gz %prep %autosetup -n %{lastversion_dir} And reference it in the spec file appropriately, if needed. These simple changes will guarantee that no matter what tag schemes the upstream uses, your new version builds will be successful! For non-GitHub projects \u00a4 Specify lastversion_repo macro inside the spec file so that lastversion knows which project to check for latest version and subsequently update the Version: tag for it. Example: %global lastversion_repo monit Spec changes for module builds \u00a4 When you build a module of software, slightly different spec changes are required. You can find the example under tests/nginx-module-immutable , which is a spec file for building the immutable NGINX module ############################################# %global upstream_github GetPageSpeed %global upstream_name ngx_immutable ############################################# %global lastversion_tag x %global lastversion_dir x %global upstream_version x ############################################ Here, we defined upstream_name global, because the package name is nginx-module-immutable while the short name of the GitHub repo is ngx_immutable . The notable change when building a module is an extra upstream_version macro. For module spec files, this is where lastversion will write the new version. Your Version: tag will stay static between different versions, and must have the form that includes macros for the version of the parent software and the module, e.g.: %global upstream_version x # <-- filled by `lastversion` Version: %{nginx_version}+%{upstream_version} Updating the parent software version is not in the scope of this article. But you can also use lastversion to e.g. create a -devel package where the parent software's version is written to the appropriate (in this case, nginx_version ) macro.","title":"Preparing SPEC files"},{"location":"spec-preparing/#lastversion-friendly-spec-changes","text":"There are only a couple of modifications you must make to your .spec file in order to make it lastversion friendly.","title":"lastversion-friendly spec changes"},{"location":"spec-preparing/#for-github-projects","text":"The header of the .spec file must have the following macros defined: %global upstream_github <repository owner> %global lastversion_tag x %global lastversion_dir x The %upstream_github is static and defines the owner of a GitHub repository, e.g. for google/brotli repository, you will have: %global upstream_github brotli lastversion constructs the complete GitHub repo name by looking at the values of the upstream_github macro and the Name: tag. If the package name and GitHub repository Name: of your package do not match, then specify another global with the GitHub repo name: %global upstream_name brotli The lastversion_tag and lastversion_dir macros are not static. These globals, as well as Version: tag, are be updated by lastversion with the proper values for the last release, whenever you run lastversion foo.spec . The URL: and Source0: tags of your spec file must be put to the following form: %global upstream_github <repository owner> %global lastversion_tag x %global lastversion_dir x Name: <name> URL: https://github.com/%{upstream_github}/%{name} Source0: %{url}/archive/%{lastversion_tag}/%{name}-%{lastversion_tag}.tar.gz Wherever in the .spec file you unpack the tarball and have to reference the extracted directory name, use %{lastversion_dir} . Example: %global upstream_github <repository owner> %global lastversion_tag x %global lastversion_dir x Name: <name> URL: https://github.com/%{upstream_github}/%{name} Source0: %{url}/archive/%{lastversion_tag}/%{name}-%{lastversion_tag}.tar.gz %prep %autosetup -n %{lastversion_dir} And reference it in the spec file appropriately, if needed. These simple changes will guarantee that no matter what tag schemes the upstream uses, your new version builds will be successful!","title":"For GitHub projects"},{"location":"spec-preparing/#for-non-github-projects","text":"Specify lastversion_repo macro inside the spec file so that lastversion knows which project to check for latest version and subsequently update the Version: tag for it. Example: %global lastversion_repo monit","title":"For non-GitHub projects"},{"location":"spec-preparing/#spec-changes-for-module-builds","text":"When you build a module of software, slightly different spec changes are required. You can find the example under tests/nginx-module-immutable , which is a spec file for building the immutable NGINX module ############################################# %global upstream_github GetPageSpeed %global upstream_name ngx_immutable ############################################# %global lastversion_tag x %global lastversion_dir x %global upstream_version x ############################################ Here, we defined upstream_name global, because the package name is nginx-module-immutable while the short name of the GitHub repo is ngx_immutable . The notable change when building a module is an extra upstream_version macro. For module spec files, this is where lastversion will write the new version. Your Version: tag will stay static between different versions, and must have the form that includes macros for the version of the parent software and the module, e.g.: %global upstream_version x # <-- filled by `lastversion` Version: %{nginx_version}+%{upstream_version} Updating the parent software version is not in the scope of this article. But you can also use lastversion to e.g. create a -devel package where the parent software's version is written to the appropriate (in this case, nginx_version ) macro.","title":"Spec changes for module builds"},{"location":"reference/Version/","text":"Version ( Version ) \u00a4 This class abstracts handling of a project's versions. It implements the scheme defined in PEP 440. A Version instance is comparison aware and can be compared and sorted using the standard Python interfaces. This class is descendant from Version found in packaging.version , and implements some additional, \"AI\"-like normalization during instantiation. Parameters: Name Type Description Default version str The string representation of a version which will be parsed and normalized before use. required Exceptions: Type Description InvalidVersion If the version does not conform to PEP 440 in any way then this exception will be raised. Source code in lastversion/Version.py class Version ( PackagingVersion ): \"\"\" This class abstracts handling of a project's versions. It implements the scheme defined in PEP 440. A `Version` instance is comparison aware and can be compared and sorted using the standard Python interfaces. This class is descendant from Version found in `packaging.version`, and implements some additional, \"AI\"-like normalization during instantiation. Args: version (str): The string representation of a version which will be parsed and normalized before use. Raises: InvalidVersion: If the ``version`` does not conform to PEP 440 in any way then this exception will be raised. \"\"\" def fix_letter_post_release ( self , match ): self . fixed_letter_post_release = True return match . group ( 1 ) + '.post' + str ( ord ( match . group ( 2 ))) def __init__ ( self , version , char_fix_required = False ): \"\"\"Instantiate the `Version` object. Args: version (str): The version-like string char_fix_required (bool): Should we treat alphanumerics as part of version \"\"\" self . fixed_letter_post_release = False # 4.27-chaos-preview-3 -> 4.27-chaos-pre3 version = re . sub ( '-preview-( \\\\ d+)' , '-pre \\\\ 1' , version , 1 ) # 5.0.0-early-access-2 -> 5.0.0-alpha2 version = re . sub ( '-early-access-( \\\\ d+)' , '-alpha \\\\ 1' , version , 1 ) # v4.0.0-pre-0 -> v4.0.0-pre0 version = re . sub ( '-pre-( \\\\ d+)' , '-pre \\\\ 1' , version , 1 ) # v0.16.0-beta.rc4 -> v0.16.0-beta4 # both beta and rc? :) -> beta version = re . sub ( r '-beta[-.]rc(\\d+)' , '-beta \\\\ 1' , version , 1 ) # many times they would tag foo-1.2.3 which would parse to LegacyVersion # we can avoid this, by reassigning to what comes after the dash: parts = version . split ( '-' ) # TODO test v5.12-rc1-dontuse -> v5.12.rc1 # go through parts separated by dot, detect beta level, and weed out numberless info: parts_n = [] for part in parts : # help devel releases to be correctly identified # https://www.python.org/dev/peps/pep-0440/#developmental-releases if part in [ 'devel' , 'test' , 'dev' ]: part = 'dev0' elif part in [ 'beta' ]: # \"4.3.0-beta\" part = 'b0' else : # help post (patch) releases to be correctly identified (e.g. Magento 2.3.4-p2) # p12 => post12 part = re . sub ( '^p( \\\\ d+)$' , 'post \\\\ 1' , part , 1 ) if not part . isalpha (): parts_n . append ( part ) if not parts_n : raise InvalidVersion ( \"Invalid version: ' {0} '\" . format ( version )) # remove *any* non-digits which appear at the beginning of the version string # e.g. Rhino1_7_13_Release does not even bother to put a delimiter... # such string at the beginning typically do not convey stability level, # so we are fine to remove them (unlike the ones in the tail) parts_n [ 0 ] = re . sub ( '^[^0-9]+' , '' , parts_n [ 0 ], 1 ) # go back to full string parse out version = \".\" . join ( parts_n ) if char_fix_required : version = re . sub ( '( \\\\ d)([a-z])$' , self . fix_letter_post_release , version , 1 ) # release-3_0_2 is often seen on Mercurial holders # note that above code removes \"release-\" already, so we are left with \"3_0_2\" if re . search ( r '^(?:\\d+_)+(?:\\d+)' , version ): version = version . replace ( '_' , '.' ) # finally, split by dot \"delimiter\", see if there are common words which are definitely # removable parts = version . split ( '.' ) version = [] for p in parts : if p . lower () in [ 'release' ]: continue version . append ( p ) version = '.' . join ( version ) super ( Version , self ) . __init__ ( version ) @property def epoch ( self ): # type: () -> int \"\"\" An integer giving the version epoch of this Version instance \"\"\" _epoch = self . _version . epoch # type: int return _epoch @property def release ( self ): \"\"\" A tuple of integers giving the components of the release segment of this Version instance; that is, the 1.2.3 part of the version number, including trailing zeroes but not including the epoch or any prerelease/development/postrelease suffixes \"\"\" _release = self . _version . release return _release @property def pre ( self ): _pre = self . _version . pre return _pre @property def post ( self ): return self . _version . post [ 1 ] if self . _version . post else None @property def dev ( self ): return self . _version . dev [ 1 ] if self . _version . dev else None @property def local ( self ): if self . _version . local : return \".\" . join ( str ( x ) for x in self . _version . local ) return None @property def major ( self ): # type: () -> int return self . release [ 0 ] if len ( self . release ) >= 1 else 0 @property def minor ( self ): # type: () -> int return self . release [ 1 ] if len ( self . release ) >= 2 else 0 @property def micro ( self ): # type: () -> int return self . release [ 2 ] if len ( self . release ) >= 3 else 0 @staticmethod def is_not_date ( num ): \"\"\"Helper function to determine if a number is not a date\"\"\" num_str = str ( num ) try : # Attempt to parse the number as a date datetime . strptime ( num_str , '%Y%m %d ' ) return False except ValueError : # If parsing fails, the number is not a date return True @property def is_prerelease ( self ): \"\"\" Version is a prerelease if it contains all the following: * 90+ micro component * no date in micro component \"\"\" # type: () -> bool if self . major and self . minor and self . micro >= 90 and self . is_not_date ( self . micro ): return True return self . dev is not None or self . pre is not None @property def even ( self ): return self . minor and not self . minor % 2 def sem_extract_base ( self , level = None ): \"\"\" Return Version with desired semantic version level base E.g. for 5.9.3 it will return 5.9 (patch is None) \"\"\" if level == 'major' : # get major return Version ( str ( self . major )) if level == 'minor' : return Version ( \" {} . {} \" . format ( self . major , self . minor )) if level == 'patch' : return Version ( \" {} . {} . {} \" . format ( self . major , self . minor , self . micro )) return self def __str__ ( self ): # type: () -> str parts = [] # Epoch if self . epoch != 0 : parts . append ( \" {0} !\" . format ( self . epoch )) # Release segment parts . append ( \".\" . join ( str ( x ) for x in self . release )) # Pre-release if self . pre is not None : parts . append ( \"\" . join ( str ( x ) for x in self . pre )) # Post-release if self . post is not None : if self . fixed_letter_post_release : parts . append ( \" {0} \" . format ( chr ( self . post ))) else : parts . append ( \".post {0} \" . format ( self . post )) # Development release if self . dev is not None : parts . append ( \".dev {0} \" . format ( self . dev )) # Local version segment if self . local is not None : parts . append ( \"+ {0} \" . format ( self . local )) return \"\" . join ( parts ) epoch property readonly \u00a4 An integer giving the version epoch of this Version instance is_prerelease property readonly \u00a4 Version is a prerelease if it contains all the following: * 90+ micro component * no date in micro component release property readonly \u00a4 A tuple of integers giving the components of the release segment of this Version instance; that is, the 1.2.3 part of the version number, including trailing zeroes but not including the epoch or any prerelease/development/postrelease suffixes __init__ ( self , version , char_fix_required = False ) special \u00a4 Instantiate the Version object. Parameters: Name Type Description Default version str The version-like string required char_fix_required bool Should we treat alphanumerics as part of version False Source code in lastversion/Version.py def __init__ ( self , version , char_fix_required = False ): \"\"\"Instantiate the `Version` object. Args: version (str): The version-like string char_fix_required (bool): Should we treat alphanumerics as part of version \"\"\" self . fixed_letter_post_release = False # 4.27-chaos-preview-3 -> 4.27-chaos-pre3 version = re . sub ( '-preview-( \\\\ d+)' , '-pre \\\\ 1' , version , 1 ) # 5.0.0-early-access-2 -> 5.0.0-alpha2 version = re . sub ( '-early-access-( \\\\ d+)' , '-alpha \\\\ 1' , version , 1 ) # v4.0.0-pre-0 -> v4.0.0-pre0 version = re . sub ( '-pre-( \\\\ d+)' , '-pre \\\\ 1' , version , 1 ) # v0.16.0-beta.rc4 -> v0.16.0-beta4 # both beta and rc? :) -> beta version = re . sub ( r '-beta[-.]rc(\\d+)' , '-beta \\\\ 1' , version , 1 ) # many times they would tag foo-1.2.3 which would parse to LegacyVersion # we can avoid this, by reassigning to what comes after the dash: parts = version . split ( '-' ) # TODO test v5.12-rc1-dontuse -> v5.12.rc1 # go through parts separated by dot, detect beta level, and weed out numberless info: parts_n = [] for part in parts : # help devel releases to be correctly identified # https://www.python.org/dev/peps/pep-0440/#developmental-releases if part in [ 'devel' , 'test' , 'dev' ]: part = 'dev0' elif part in [ 'beta' ]: # \"4.3.0-beta\" part = 'b0' else : # help post (patch) releases to be correctly identified (e.g. Magento 2.3.4-p2) # p12 => post12 part = re . sub ( '^p( \\\\ d+)$' , 'post \\\\ 1' , part , 1 ) if not part . isalpha (): parts_n . append ( part ) if not parts_n : raise InvalidVersion ( \"Invalid version: ' {0} '\" . format ( version )) # remove *any* non-digits which appear at the beginning of the version string # e.g. Rhino1_7_13_Release does not even bother to put a delimiter... # such string at the beginning typically do not convey stability level, # so we are fine to remove them (unlike the ones in the tail) parts_n [ 0 ] = re . sub ( '^[^0-9]+' , '' , parts_n [ 0 ], 1 ) # go back to full string parse out version = \".\" . join ( parts_n ) if char_fix_required : version = re . sub ( '( \\\\ d)([a-z])$' , self . fix_letter_post_release , version , 1 ) # release-3_0_2 is often seen on Mercurial holders # note that above code removes \"release-\" already, so we are left with \"3_0_2\" if re . search ( r '^(?:\\d+_)+(?:\\d+)' , version ): version = version . replace ( '_' , '.' ) # finally, split by dot \"delimiter\", see if there are common words which are definitely # removable parts = version . split ( '.' ) version = [] for p in parts : if p . lower () in [ 'release' ]: continue version . append ( p ) version = '.' . join ( version ) super ( Version , self ) . __init__ ( version ) is_not_date ( num ) staticmethod \u00a4 Helper function to determine if a number is not a date Source code in lastversion/Version.py @staticmethod def is_not_date ( num ): \"\"\"Helper function to determine if a number is not a date\"\"\" num_str = str ( num ) try : # Attempt to parse the number as a date datetime . strptime ( num_str , '%Y%m %d ' ) return False except ValueError : # If parsing fails, the number is not a date return True sem_extract_base ( self , level = None ) \u00a4 Return Version with desired semantic version level base E.g. for 5.9.3 it will return 5.9 (patch is None) Source code in lastversion/Version.py def sem_extract_base ( self , level = None ): \"\"\" Return Version with desired semantic version level base E.g. for 5.9.3 it will return 5.9 (patch is None) \"\"\" if level == 'major' : # get major return Version ( str ( self . major )) if level == 'minor' : return Version ( \" {} . {} \" . format ( self . major , self . minor )) if level == 'patch' : return Version ( \" {} . {} . {} \" . format ( self . major , self . minor , self . micro )) return self","title":"Version.py"},{"location":"reference/Version/#lastversion.Version.Version","text":"This class abstracts handling of a project's versions. It implements the scheme defined in PEP 440. A Version instance is comparison aware and can be compared and sorted using the standard Python interfaces. This class is descendant from Version found in packaging.version , and implements some additional, \"AI\"-like normalization during instantiation. Parameters: Name Type Description Default version str The string representation of a version which will be parsed and normalized before use. required Exceptions: Type Description InvalidVersion If the version does not conform to PEP 440 in any way then this exception will be raised. Source code in lastversion/Version.py class Version ( PackagingVersion ): \"\"\" This class abstracts handling of a project's versions. It implements the scheme defined in PEP 440. A `Version` instance is comparison aware and can be compared and sorted using the standard Python interfaces. This class is descendant from Version found in `packaging.version`, and implements some additional, \"AI\"-like normalization during instantiation. Args: version (str): The string representation of a version which will be parsed and normalized before use. Raises: InvalidVersion: If the ``version`` does not conform to PEP 440 in any way then this exception will be raised. \"\"\" def fix_letter_post_release ( self , match ): self . fixed_letter_post_release = True return match . group ( 1 ) + '.post' + str ( ord ( match . group ( 2 ))) def __init__ ( self , version , char_fix_required = False ): \"\"\"Instantiate the `Version` object. Args: version (str): The version-like string char_fix_required (bool): Should we treat alphanumerics as part of version \"\"\" self . fixed_letter_post_release = False # 4.27-chaos-preview-3 -> 4.27-chaos-pre3 version = re . sub ( '-preview-( \\\\ d+)' , '-pre \\\\ 1' , version , 1 ) # 5.0.0-early-access-2 -> 5.0.0-alpha2 version = re . sub ( '-early-access-( \\\\ d+)' , '-alpha \\\\ 1' , version , 1 ) # v4.0.0-pre-0 -> v4.0.0-pre0 version = re . sub ( '-pre-( \\\\ d+)' , '-pre \\\\ 1' , version , 1 ) # v0.16.0-beta.rc4 -> v0.16.0-beta4 # both beta and rc? :) -> beta version = re . sub ( r '-beta[-.]rc(\\d+)' , '-beta \\\\ 1' , version , 1 ) # many times they would tag foo-1.2.3 which would parse to LegacyVersion # we can avoid this, by reassigning to what comes after the dash: parts = version . split ( '-' ) # TODO test v5.12-rc1-dontuse -> v5.12.rc1 # go through parts separated by dot, detect beta level, and weed out numberless info: parts_n = [] for part in parts : # help devel releases to be correctly identified # https://www.python.org/dev/peps/pep-0440/#developmental-releases if part in [ 'devel' , 'test' , 'dev' ]: part = 'dev0' elif part in [ 'beta' ]: # \"4.3.0-beta\" part = 'b0' else : # help post (patch) releases to be correctly identified (e.g. Magento 2.3.4-p2) # p12 => post12 part = re . sub ( '^p( \\\\ d+)$' , 'post \\\\ 1' , part , 1 ) if not part . isalpha (): parts_n . append ( part ) if not parts_n : raise InvalidVersion ( \"Invalid version: ' {0} '\" . format ( version )) # remove *any* non-digits which appear at the beginning of the version string # e.g. Rhino1_7_13_Release does not even bother to put a delimiter... # such string at the beginning typically do not convey stability level, # so we are fine to remove them (unlike the ones in the tail) parts_n [ 0 ] = re . sub ( '^[^0-9]+' , '' , parts_n [ 0 ], 1 ) # go back to full string parse out version = \".\" . join ( parts_n ) if char_fix_required : version = re . sub ( '( \\\\ d)([a-z])$' , self . fix_letter_post_release , version , 1 ) # release-3_0_2 is often seen on Mercurial holders # note that above code removes \"release-\" already, so we are left with \"3_0_2\" if re . search ( r '^(?:\\d+_)+(?:\\d+)' , version ): version = version . replace ( '_' , '.' ) # finally, split by dot \"delimiter\", see if there are common words which are definitely # removable parts = version . split ( '.' ) version = [] for p in parts : if p . lower () in [ 'release' ]: continue version . append ( p ) version = '.' . join ( version ) super ( Version , self ) . __init__ ( version ) @property def epoch ( self ): # type: () -> int \"\"\" An integer giving the version epoch of this Version instance \"\"\" _epoch = self . _version . epoch # type: int return _epoch @property def release ( self ): \"\"\" A tuple of integers giving the components of the release segment of this Version instance; that is, the 1.2.3 part of the version number, including trailing zeroes but not including the epoch or any prerelease/development/postrelease suffixes \"\"\" _release = self . _version . release return _release @property def pre ( self ): _pre = self . _version . pre return _pre @property def post ( self ): return self . _version . post [ 1 ] if self . _version . post else None @property def dev ( self ): return self . _version . dev [ 1 ] if self . _version . dev else None @property def local ( self ): if self . _version . local : return \".\" . join ( str ( x ) for x in self . _version . local ) return None @property def major ( self ): # type: () -> int return self . release [ 0 ] if len ( self . release ) >= 1 else 0 @property def minor ( self ): # type: () -> int return self . release [ 1 ] if len ( self . release ) >= 2 else 0 @property def micro ( self ): # type: () -> int return self . release [ 2 ] if len ( self . release ) >= 3 else 0 @staticmethod def is_not_date ( num ): \"\"\"Helper function to determine if a number is not a date\"\"\" num_str = str ( num ) try : # Attempt to parse the number as a date datetime . strptime ( num_str , '%Y%m %d ' ) return False except ValueError : # If parsing fails, the number is not a date return True @property def is_prerelease ( self ): \"\"\" Version is a prerelease if it contains all the following: * 90+ micro component * no date in micro component \"\"\" # type: () -> bool if self . major and self . minor and self . micro >= 90 and self . is_not_date ( self . micro ): return True return self . dev is not None or self . pre is not None @property def even ( self ): return self . minor and not self . minor % 2 def sem_extract_base ( self , level = None ): \"\"\" Return Version with desired semantic version level base E.g. for 5.9.3 it will return 5.9 (patch is None) \"\"\" if level == 'major' : # get major return Version ( str ( self . major )) if level == 'minor' : return Version ( \" {} . {} \" . format ( self . major , self . minor )) if level == 'patch' : return Version ( \" {} . {} . {} \" . format ( self . major , self . minor , self . micro )) return self def __str__ ( self ): # type: () -> str parts = [] # Epoch if self . epoch != 0 : parts . append ( \" {0} !\" . format ( self . epoch )) # Release segment parts . append ( \".\" . join ( str ( x ) for x in self . release )) # Pre-release if self . pre is not None : parts . append ( \"\" . join ( str ( x ) for x in self . pre )) # Post-release if self . post is not None : if self . fixed_letter_post_release : parts . append ( \" {0} \" . format ( chr ( self . post ))) else : parts . append ( \".post {0} \" . format ( self . post )) # Development release if self . dev is not None : parts . append ( \".dev {0} \" . format ( self . dev )) # Local version segment if self . local is not None : parts . append ( \"+ {0} \" . format ( self . local )) return \"\" . join ( parts )","title":"Version"},{"location":"reference/Version/#lastversion.Version.Version.epoch","text":"An integer giving the version epoch of this Version instance","title":"epoch"},{"location":"reference/Version/#lastversion.Version.Version.is_prerelease","text":"Version is a prerelease if it contains all the following: * 90+ micro component * no date in micro component","title":"is_prerelease"},{"location":"reference/Version/#lastversion.Version.Version.release","text":"A tuple of integers giving the components of the release segment of this Version instance; that is, the 1.2.3 part of the version number, including trailing zeroes but not including the epoch or any prerelease/development/postrelease suffixes","title":"release"},{"location":"reference/Version/#lastversion.Version.Version.__init__","text":"Instantiate the Version object. Parameters: Name Type Description Default version str The version-like string required char_fix_required bool Should we treat alphanumerics as part of version False Source code in lastversion/Version.py def __init__ ( self , version , char_fix_required = False ): \"\"\"Instantiate the `Version` object. Args: version (str): The version-like string char_fix_required (bool): Should we treat alphanumerics as part of version \"\"\" self . fixed_letter_post_release = False # 4.27-chaos-preview-3 -> 4.27-chaos-pre3 version = re . sub ( '-preview-( \\\\ d+)' , '-pre \\\\ 1' , version , 1 ) # 5.0.0-early-access-2 -> 5.0.0-alpha2 version = re . sub ( '-early-access-( \\\\ d+)' , '-alpha \\\\ 1' , version , 1 ) # v4.0.0-pre-0 -> v4.0.0-pre0 version = re . sub ( '-pre-( \\\\ d+)' , '-pre \\\\ 1' , version , 1 ) # v0.16.0-beta.rc4 -> v0.16.0-beta4 # both beta and rc? :) -> beta version = re . sub ( r '-beta[-.]rc(\\d+)' , '-beta \\\\ 1' , version , 1 ) # many times they would tag foo-1.2.3 which would parse to LegacyVersion # we can avoid this, by reassigning to what comes after the dash: parts = version . split ( '-' ) # TODO test v5.12-rc1-dontuse -> v5.12.rc1 # go through parts separated by dot, detect beta level, and weed out numberless info: parts_n = [] for part in parts : # help devel releases to be correctly identified # https://www.python.org/dev/peps/pep-0440/#developmental-releases if part in [ 'devel' , 'test' , 'dev' ]: part = 'dev0' elif part in [ 'beta' ]: # \"4.3.0-beta\" part = 'b0' else : # help post (patch) releases to be correctly identified (e.g. Magento 2.3.4-p2) # p12 => post12 part = re . sub ( '^p( \\\\ d+)$' , 'post \\\\ 1' , part , 1 ) if not part . isalpha (): parts_n . append ( part ) if not parts_n : raise InvalidVersion ( \"Invalid version: ' {0} '\" . format ( version )) # remove *any* non-digits which appear at the beginning of the version string # e.g. Rhino1_7_13_Release does not even bother to put a delimiter... # such string at the beginning typically do not convey stability level, # so we are fine to remove them (unlike the ones in the tail) parts_n [ 0 ] = re . sub ( '^[^0-9]+' , '' , parts_n [ 0 ], 1 ) # go back to full string parse out version = \".\" . join ( parts_n ) if char_fix_required : version = re . sub ( '( \\\\ d)([a-z])$' , self . fix_letter_post_release , version , 1 ) # release-3_0_2 is often seen on Mercurial holders # note that above code removes \"release-\" already, so we are left with \"3_0_2\" if re . search ( r '^(?:\\d+_)+(?:\\d+)' , version ): version = version . replace ( '_' , '.' ) # finally, split by dot \"delimiter\", see if there are common words which are definitely # removable parts = version . split ( '.' ) version = [] for p in parts : if p . lower () in [ 'release' ]: continue version . append ( p ) version = '.' . join ( version ) super ( Version , self ) . __init__ ( version )","title":"__init__()"},{"location":"reference/Version/#lastversion.Version.Version.is_not_date","text":"Helper function to determine if a number is not a date Source code in lastversion/Version.py @staticmethod def is_not_date ( num ): \"\"\"Helper function to determine if a number is not a date\"\"\" num_str = str ( num ) try : # Attempt to parse the number as a date datetime . strptime ( num_str , '%Y%m %d ' ) return False except ValueError : # If parsing fails, the number is not a date return True","title":"is_not_date()"},{"location":"reference/Version/#lastversion.Version.Version.sem_extract_base","text":"Return Version with desired semantic version level base E.g. for 5.9.3 it will return 5.9 (patch is None) Source code in lastversion/Version.py def sem_extract_base ( self , level = None ): \"\"\" Return Version with desired semantic version level base E.g. for 5.9.3 it will return 5.9 (patch is None) \"\"\" if level == 'major' : # get major return Version ( str ( self . major )) if level == 'minor' : return Version ( \" {} . {} \" . format ( self . major , self . minor )) if level == 'patch' : return Version ( \" {} . {} . {} \" . format ( self . major , self . minor , self . micro )) return self","title":"sem_extract_base()"},{"location":"reference/lastversion/","text":"This is the main module of lastversion package. To use it, import it and invoke any function documented here. For example: from lastversion import lastversion lastversion . has_update ( repo = 'mautic/mautic' , current_version = '1.2.3' ) check_version ( value ) \u00a4 Given a version string, raises argparse.ArgumentTypeError if it does not contain any version. In lastversion CLI app, this is used as argument parser helper for --newer-than (-gt) option. Parameters: Name Type Description Default value str Free-format string which is meant to contain user-supplied version required Exceptions: Type Description argparse.ArgumentTypeError Exception in case version was not found in the input string Returns: Type Description Version Parsed version object Source code in lastversion/lastversion.py def check_version ( value ): \"\"\"Given a version string, raises argparse.ArgumentTypeError if it does not contain any version. In lastversion CLI app, this is used as argument parser helper for --newer-than (-gt) option. Args: value (str): Free-format string which is meant to contain user-supplied version Raises: argparse.ArgumentTypeError: Exception in case version was not found in the input string Returns: Version: Parsed version object \"\"\" \"\"\" Argument parser helper for --newer-than (-gt) option :param value: :type value: :return: :rtype: \"\"\" try : # TODO use sanitize_version so that we can just pass tags as values # help devel releases to be correctly identified # https://www.python.org/dev/peps/pep-0440/#developmental-releases value = re . sub ( '-devel$' , '.dev0' , value , 1 ) # help post (patch) releases to be correctly identified (e.g. Magento 2.3.4-p2) value = re . sub ( '-p( \\\\ d+)$' , '.post \\\\ 1' , value , 1 ) value = Version ( value ) except InvalidVersion : raise argparse . ArgumentTypeError ( \" %s is an invalid version value\" % value ) return value has_update ( repo , current_version , pre_ok = False , at = None ) \u00a4 Given an existing version for a repo, checks if there is an update. Parameters: Name Type Description Default repo str Repository specifier in any form. required current_version str A version you want to check update for. required pre_ok bool Specifies whether pre-releases can be accepted as newer version. False at str Specifies repo hosting more precisely, only useful if repo argument was specified as one word. None Returns: Type Description Version Newer version as object, if found. Otherwise, False Source code in lastversion/lastversion.py def has_update ( repo , current_version , pre_ok = False , at = None ): \"\"\"Given an existing version for a repo, checks if there is an update. Args: repo (str): Repository specifier in any form. current_version (str): A version you want to check update for. pre_ok (bool): Specifies whether pre-releases can be accepted as newer version. at (str): Specifies repo hosting more precisely, only useful if repo argument was specified as one word. Returns: Version: Newer version as object, if found. Otherwise, False \"\"\" latest_version = latest ( repo , output_format = 'version' , pre_ok = pre_ok , at = at ) if latest_version and latest_version > Version ( current_version ): return latest_version return False install_app_image ( url , install_name ) \u00a4 Install an AppImage from a URL to ~/Applications/<install_name> Parameters: Name Type Description Default url str URL where AppImage file is hosted required install_name str Short name that the AppImage will be renamed to required Source code in lastversion/lastversion.py def install_app_image ( url , install_name ): \"\"\"Install an AppImage from a URL to `~/Applications/<install_name>` Args: url (str): URL where AppImage file is hosted install_name (str): Short name that the AppImage will be renamed to \"\"\" home_dir = os . path . expanduser ( '~' ) apps_dir = os . path . join ( home_dir , 'Applications' ) app_file_name = os . path . join ( apps_dir , install_name ) Path ( apps_dir ) . mkdir ( exist_ok = True , parents = True ) download_file ( url , app_file_name ) os . chmod ( app_file_name , 0o755 ) # skipcq: BAN-B103 extract_appimage_desktop_file ( app_file_name ) latest ( repo , output_format = 'version' , pre_ok = False , assets_filter = None , short_urls = False , major = None , only = None , at = None , having_asset = None , exclude = None , even = False ) \u00a4 Find the latest release version for a project. Parameters: Name Type Description Default major str Only consider versions which are \"descendants\" of this major version string None short_urls bool Whether we should try to return shorter URLs for release data False assets_filter Union[str, Pattern] Regular expression for filtering assets for the latest release None only str Only consider tags with this text. Useful for repos with multiple projects. The argument supports negation and regular expressions. To indicate a regex, start it with tilde sign, to negate the expression, start it with exclamation point. See Examples . None repo str Repository specifier in any form. required output_format str Affects the return format. Possible values version , json , dict , assets , source , tag . 'version' pre_ok bool Specifies whether pre-releases can be accepted as a newer version. False at str Specifies repo hosting more precisely, only useful if repo argument was specified as one word. None having_asset Union[str, bool] Only consider releases with the given asset. Pass True for any asset None exclude str Only consider releases NOT containing this text/regular expression. None even bool Consider as stable only releases with even minor component, e.g. 1.2.3 False Examples: Find the latest version of Mautic, it is OK to consider betas. >>> latest ( \"mautic/mautic\" , output_format = 'version' , pre_ok = True ) < Version ( '4.4.4' ) > Consider only tags without letters: >>> latest ( \"openssl/openssl\" , output_format = 'version' , only = r '!~\\w' ) < Version ( '3.0.7' ) > Returns: Type Description Union[Version, dict] Newer version object, if found and output_format is version . Returns: Type Description str Single string containing tag, if found and output_format is tag Source code in lastversion/lastversion.py def latest ( repo , output_format = 'version' , pre_ok = False , assets_filter = None , short_urls = False , major = None , only = None , at = None , having_asset = None , exclude = None , even = False ): r \"\"\"Find the latest release version for a project. Args: major (str): Only consider versions which are \"descendants\" of this major version string short_urls (bool): Whether we should try to return shorter URLs for release data assets_filter (Union[str, Pattern]): Regular expression for filtering assets for the latest release only (str): Only consider tags with this text. Useful for repos with multiple projects. The argument supports negation and regular expressions. To indicate a regex, start it with tilde sign, to negate the expression, start it with exclamation point. See ``Examples``. repo (str): Repository specifier in any form. output_format (str): Affects the return format. Possible values `version`, `json`, `dict`, `assets`, `source`, `tag`. pre_ok (bool): Specifies whether pre-releases can be accepted as a newer version. at (str): Specifies repo hosting more precisely, only useful if repo argument was specified as one word. having_asset (Union[str, bool]): Only consider releases with the given asset. Pass `True` for any asset exclude (str): Only consider releases NOT containing this text/regular expression. even (bool): Consider as stable only releases with even minor component, e.g. 1.2.3 Examples: Find the latest version of Mautic, it is OK to consider betas. >>> latest(\"mautic/mautic\", output_format='version', pre_ok=True) <Version('4.4.4')> Consider only tags without letters: >>> latest(\"openssl/openssl\", output_format='version', only=r'!~\\w') <Version('3.0.7')> Returns: Union[Version, dict]: Newer version object, if found and `output_format` is `version`. Returns: str: Single string containing tag, if found and `output_format` is `tag` \"\"\" repo_data = {} if repo . endswith ( '.yml' ) and not repo . startswith (( 'http://' , 'https://' )): with open ( repo ) as fpi : repo_data = yaml . safe_load ( fpi ) if 'repo' in repo_data : if 'nginx-extras' in repo : repo_data [ 'module_of' ] = 'nginx' name = os . path . splitext ( os . path . basename ( repo ))[ 0 ] if 'module_of' in repo_data : name = ' {} -module- {} ' . format ( repo_data [ 'module_of' ], name ) repo = repo_data [ 'repo' ] repo_data [ 'name' ] = name if repo . startswith (( 'http://' , 'https://' )) and repo . endswith ( 'Chart.yaml' ): at = 'helm_chart' if repo . endswith ( '.spec' ): # repo is specified inside the .spec file # GitHub repo is resolved via %{upstream_github} + %{name}/%{upstream_name} # no upstream_github global means that the spec was not prepared for lastversion # optional: use of spec_tag macros if the source is from GitHub. in edge cases we check # new version via GitHub, but prepared sources are elsewhere with open ( repo ) as f : name = None upstream_github = None upstream_name = None current_version = None spec_repo = None spec_url = None for line in f . readlines (): if line . startswith ( ' %g lobal lastversion_repo' ): spec_repo = line . split ( ' ' )[ 2 ] . strip () elif line . startswith ( ' %g lobal upstream_github' ): upstream_github = line . split ( ' ' )[ 2 ] . strip () elif line . startswith ( ' %g lobal upstream_name' ): upstream_name = line . split ( ' ' )[ 2 ] . strip () elif line . startswith ( 'Name:' ): name = line . split ( 'Name:' )[ 1 ] . strip () elif line . startswith ( 'URL:' ): spec_url = line . split ( 'URL:' )[ 1 ] . strip () elif line . startswith ( ' %g lobal upstream_version ' ): current_version = line . split ( ' ' )[ 2 ] . strip () # influences %spec_tag to use %upstream_version instead of %version repo_data [ 'module_of' ] = True elif line . startswith ( 'Version:' ) and not current_version : current_version = line . split ( 'Version:' )[ 1 ] . strip () if spec_url : spec_host = urlparse ( spec_url ) . hostname if spec_host in [ 'github.com' ] and not upstream_github and not spec_repo : log . warning ( 'Neither %u pstream_github nor %la stversion_repo macros were found. ' 'Please prepare your spec file using instructions: ' 'https://lastversion.getpagespeed.com/spec-preparing.html' ) if not current_version : log . critical ( 'Did not find neither Version: nor %u pstream_version in the spec file' ) sys . exit ( 1 ) try : if current_version != 'x' : repo_data [ 'current_version' ] = Version ( current_version ) except InvalidVersion : log . critical ( 'Failed to parse current version in %s . Tried %s ' , repo , current_version ) sys . exit ( 1 ) if upstream_name : repo_data [ 'name' ] = upstream_name repo_data [ 'spec_name' ] = '% {upstream_name} ' else : repo_data [ 'name' ] = name repo_data [ 'spec_name' ] = '% {name} ' if upstream_github : repo = \" {} / {} \" . format ( upstream_github , repo_data [ 'name' ]) log . info ( 'Discovered GitHub repo %s from .spec file' , repo ) elif spec_repo : repo = spec_repo log . info ( 'Discovered explicit repo %s from .spec file' , repo ) elif spec_url : repo = spec_url with HolderFactory . get_instance_for_repo ( repo , at = at ) as project : project . set_only ( only ) project . set_exclude ( exclude ) project . set_having_asset ( having_asset ) project . set_even ( even ) release = project . get_latest ( pre_ok = pre_ok , major = major ) # bail out, found nothing that looks like a release if not release : return None from_type = 'Located the latest release tag {} at: {} ' . format ( release [ 'tag_name' ], project . get_canonical_link () ) if 'type' in release : from_type = ' {} via {} mechanism' . format ( from_type , release [ 'type' ]) log . info ( from_type ) version = release [ 'version' ] tag = release [ 'tag_name' ] # return the release if we've reached far enough: if output_format == 'version' : return version if output_format in [ 'json' , 'dict' ]: if output_format == 'dict' : release [ 'version' ] = version else : release [ 'version' ] = str ( version ) if 'tag_date' in release : release [ 'tag_date' ] = str ( release [ 'tag_date' ]) release [ 'v_prefix' ] = tag . startswith ( \"v\" ) version_macro = 'upstream_version' if 'module_of' in repo_data else 'version' version_macro = '%{{ {} }}' . format ( version_macro ) holder_i = { value : key for key , value in HolderFactory . HOLDERS . items ()} release [ 'source' ] = holder_i [ type ( project )] release [ 'spec_tag' ] = tag . replace ( str ( version ), version_macro ) # spec_tag_no_prefix is the helpful macro which will allow us to know where tarball # extracts to (GitHub-specific) if release [ 'spec_tag' ] . startswith ( 'v {} ' . format ( version_macro )) or \\ re . match ( r '^v\\d' , release [ 'spec_tag' ]): release [ 'spec_tag_no_prefix' ] = release [ 'spec_tag' ] . lstrip ( 'v' ) else : release [ 'spec_tag_no_prefix' ] = release [ 'spec_tag' ] release [ 'tag_name' ] = tag if hasattr ( project , 'repo_license' ): release [ 'license' ] = project . repo_license ( tag ) if hasattr ( project , 'repo_readme' ): release [ 'readme' ] = project . repo_readme ( tag ) release . update ( repo_data ) try : release [ 'assets' ] = project . get_assets ( release , short_urls , assets_filter ) except NotImplementedError : pass release [ 'from' ] = project . get_canonical_link () if 'license' in release and release [ 'license' ]: spdx_id = release [ 'license' ][ 'license' ][ 'spdx_id' ] rpmspec_licence = rpmspec_licenses [ spdx_id ] if spdx_id in rpmspec_licenses else None if rpmspec_licence : release [ 'rpmspec_license' ] = rpmspec_licence return release if output_format == 'assets' : return project . get_assets ( release , short_urls , assets_filter ) if output_format == 'source' : return project . release_download_url ( release , short_urls ) if output_format == 'tag' : return tag return None main () \u00a4 The entrypoint to CLI app. Source code in lastversion/lastversion.py def main (): \"\"\"The entrypoint to CLI app.\"\"\" epilog = None if \"GITHUB_API_TOKEN\" not in os . environ and \"GITHUB_TOKEN\" not in os . environ : epilog = TOKEN_PRO_TIP parser = argparse . ArgumentParser ( description = 'Find the latest software release.' , epilog = epilog , prog = 'lastversion' ) parser . add_argument ( 'action' , nargs = '?' , default = 'get' , help = 'Action to run. Default: get' , choices = [ 'get' , 'download' , 'extract' , 'unzip' , 'test' , 'format' , 'install' , 'update-spec' ]) parser . add_argument ( 'repo' , metavar = '<repo URL or string>' , help = 'Repository in format owner/name or any URL that belongs to it, or a version string' ) # affects what is considered last release parser . add_argument ( '--pre' , dest = 'pre' , action = 'store_true' , help = 'Include pre-releases in potential versions' ) parser . add_argument ( '--sem' , dest = 'sem' , choices = [ 'major' , 'minor' , 'patch' , 'any' ], help = 'Semantic versioning level base to print or compare against' ) parser . add_argument ( '-v' , '--verbose' , action = 'count' , default = 0 , help = 'Will give you an idea of what is happening under the hood, ' '-vv to increase verbosity level' ) # no --download = False, --download filename.tar, --download = None parser . add_argument ( '-d' , '-o' , '--download' , '--output' , dest = 'download' , nargs = '?' , default = False , const = None , metavar = 'FILENAME' , help = 'Download with custom filename' ) # how / which data of last release we want to present # assets will give download urls for assets if available and sources archive otherwise # sources will give download urls for sources always # json always includes \"version\", \"tag_name\" etc. + whichever json data was # used to satisfy lastversion parser . add_argument ( '--format' , choices = [ 'version' , 'assets' , 'source' , 'json' , 'tag' ], help = 'Output format' ) parser . add_argument ( '--assets' , dest = 'assets' , action = 'store_true' , help = 'Returns assets download URLs for last release' ) parser . add_argument ( '--source' , dest = 'source' , action = 'store_true' , help = 'Returns only source URL for last release' ) parser . add_argument ( '-gt' , '--newer-than' , type = check_version , metavar = 'VER' , help = \"Output only if last version is newer than given version\" ) parser . add_argument ( '-b' , '--major' , '--branch' , metavar = 'MAJOR' , help = \"Only consider releases of a specific major \" \"version, e.g. 2.1.x\" ) parser . add_argument ( '--only' , metavar = 'REGEX' , help = \"Only consider releases containing this text. \" \"Useful for repos with multiple projects inside\" ) parser . add_argument ( '--exclude' , metavar = 'REGEX' , help = \"Only consider releases NOT containing this text. \" \"Useful for repos with multiple projects inside\" ) parser . add_argument ( '--filter' , metavar = 'REGEX' , help = \"Filters --assets result by a regular \" \"expression\" ) parser . add_argument ( '--having-asset' , metavar = 'ASSET' , help = \"Only consider releases with this asset\" , nargs = '?' , const = True ) parser . add_argument ( '-su' , '--shorter-urls' , dest = 'shorter_urls' , action = 'store_true' , help = 'A tiny bit shorter URLs produced' ) parser . add_argument ( '--even' , dest = 'even' , action = 'store_true' , help = 'Only even versions like 1.[2].x, or 3.[6].x are considered as stable' ) parser . add_argument ( '--at' , dest = 'at' , help = 'If the repo argument is one word, specifies where to look up the ' 'project. The default is via internal lookup or GitHub Search' , choices = HolderFactory . HOLDERS . keys ()) parser . add_argument ( '-y' , '--assumeyes' , dest = 'assumeyes' , action = 'store_true' , help = 'Automatically answer yes for all questions' ) parser . add_argument ( '--version' , action = VersionAction ) parser . set_defaults ( validate = True , verbose = False , format = 'version' , pre = False , assets = False , newer_than = False , filter = False , shorter_urls = False , major = None , assumeyes = False , at = None , having_asset = None , even = False ) args = parser . parse_args () if args . repo == \"self\" : args . repo = __self__ # \"expand\" repo:1.2 as repo --branch 1.2 if ':' in args . repo and \\ not ( args . repo . startswith (( 'https://' , 'http://' )) and args . repo . count ( ':' ) == 1 ): # right split ':' once only to preserve it in protocol of URLs # https://github.com/repo/owner:2.1 repo_args = args . repo . rsplit ( ':' , 1 ) args . repo = repo_args [ 0 ] args . major = repo_args [ 1 ] # instead of using root logger, we use logger = logging . getLogger ( 'lastversion' ) # create console handler and set level to debug ch = logging . StreamHandler () # create formatter fmt = ' %(name)s - %(levelname)s - %(message)s ' if args . verbose else ' %(levelname)s : %(message)s ' formatter = logging . Formatter ( fmt ) # add formatter to ch ch . setFormatter ( formatter ) # add ch to logger logger . addHandler ( ch ) if args . verbose : logger . setLevel ( logging . DEBUG ) log . info ( \"Verbose %s level output.\" , args . verbose ) if args . verbose >= 2 : cachecontrol_logger = logging . getLogger ( 'cachecontrol' ) cachecontrol_logger . removeHandler ( logging . NullHandler ()) cachecontrol_logger . addHandler ( ch ) cachecontrol_logger . setLevel ( logging . DEBUG ) if args . assets : args . format = 'assets' if args . source : args . format = 'source' if args . filter : args . filter = re . compile ( args . filter ) if args . action in [ 'test' , 'format' ]: v = parse_version ( args . repo ) if not v : log . critical ( 'Failed to parse as a valid version' ) sys . exit ( 1 ) else : # extract the desired print base v = v . sem_extract_base ( args . sem ) if args . action == 'test' : print ( \"Parsed as: {} \" . format ( v )) print ( \"Stable: {} \" . format ( not v . is_prerelease )) else : print ( v ) sys . exit ( 0 ) if args . action == 'install' : # we can only install assets args . format = 'json' if args . having_asset is None : args . having_asset = r '~\\.(AppImage|rpm)$' try : import apt args . having_asset = r '~\\.(AppImage|deb)$' except ImportError : pass if args . repo . endswith ( '.spec' ): args . action = 'update-spec' args . format = 'dict' if not args . sem : if args . action == 'update-spec' : args . sem = 'minor' else : args . sem = 'any' # imply source download, unless --assets specified # --download is legacy flag to specify download action or name of desired download file # --download == None indicates download intent where filename is based on upstream if args . action == 'download' and args . download is False : args . download = None if args . download is not False : args . action = 'download' if args . format != 'assets' : args . format = 'source' if args . action in [ 'extract' , 'unzip' ] and args . format != 'assets' : args . format = 'source' if args . newer_than : base_compare = parse_version ( args . repo ) if base_compare : print ( max ([ args . newer_than , base_compare ])) sys . exit ( 2 if base_compare <= args . newer_than else 0 ) # other action are either getting release or doing something with release (extend get action) try : res = latest ( args . repo , args . format , args . pre , args . filter , args . shorter_urls , args . major , args . only , args . at , having_asset = args . having_asset , exclude = args . exclude , even = args . even ) except ( ApiCredentialsError , BadProjectError ) as error : log . critical ( str ( error )) if isinstance ( error , ApiCredentialsError ) and \"GITHUB_API_TOKEN\" not in os . environ and \\ \"GITHUB_TOKEN\" not in os . environ : log . critical ( TOKEN_PRO_TIP ) sys . exit ( 4 ) if res : if args . action == 'update-spec' : return update_spec ( args . repo , res , sem = args . sem ) if args . action == 'download' : # download command if args . format == 'source' : # there is only one source, but we need an array res = [ res ] download_name = None # save with custom filename, if there's one file to download if len ( res ) == 1 : download_name = args . download for url in res : log . info ( \"Downloading %s ...\" , url ) download_file ( url , download_name ) sys . exit ( 0 ) if args . action in [ 'unzip' , 'extract' ]: # download command if args . format == 'source' : # there is only one source, but we need an array res = [ res ] for url in res : log . info ( \"Extracting %s ...\" , url ) extract_file ( url ) sys . exit ( 0 ) if args . action == 'install' : app_images = [ asset for asset in res [ 'assets' ] if asset . endswith ( '.AppImage' )] if app_images : return install_app_image ( app_images [ 0 ], install_name = args . repo ) rpms = [ asset for asset in res [ 'assets' ] if asset . endswith ( '.rpm' )] if not rpms : log . error ( 'No assets found to install' ) sys . exit ( 1 ) # prevents downloading large packages if we already have newest installed # consult RPM database for current version installed_version = rpm_installed_version ( args . repo ) if installed_version is False : log . warning ( 'Please install lastversion using YUM or DNF so it can check current ' 'program version. This is helpful to prevent unnecessary downloads' ) if installed_version and Version ( installed_version ) >= Version ( res [ 'version' ]): log . warning ( 'Newest version {} is already installed' . format ( installed_version )) sys . exit ( 0 ) # pass RPM URLs directly to package management program try : import subprocess params = [ 'yum' , 'install' ] params . extend ( rpms ) if args . assumeyes : params . append ( '-y' ) subprocess . call ( params ) except OSError : log . critical ( 'Failed to launch package manager. Only YUM/DNF is supported!' ) sys . exit ( 1 ) # if the system has yum, then lastversion has to be installed from yum and # has access to system packages like yum python or dnf python API # if install_with_dnf(rpms) is False or install_with_yum(rpms) is False: # log.error('Failed talking to either DNF or YUM for package install') # sys.exit(1) sys . exit ( 0 ) # display version in various formats: if args . format == 'assets' : print ( \" \\n \" . join ( res )) elif args . format == 'json' : json . dump ( res , sys . stdout ) else : # result may be a tag str, not just Version if isinstance ( res , Version ): res = res . sem_extract_base ( args . sem ) print ( res ) # special exit code \"2\" is useful for scripting to detect if no newer release exists if args . newer_than : # set up same SEM base args . newer_than = args . newer_than . sem_extract_base ( args . sem ) if res <= args . newer_than : sys . exit ( 2 ) else : # empty list returned to --assets, emit 3 if args . format == 'assets' and res is not False : sys . exit ( 3 ) log . critical ( \"No release was found\" ) sys . exit ( 1 ) parse_version ( tag ) \u00a4 Parse version to Version object. Source code in lastversion/lastversion.py def parse_version ( tag ): \"\"\"Parse version to Version object.\"\"\" h = ProjectHolder () return h . sanitize_version ( tag , pre_ok = True )","title":"lastversion.py"},{"location":"reference/lastversion/#lastversion.lastversion.check_version","text":"Given a version string, raises argparse.ArgumentTypeError if it does not contain any version. In lastversion CLI app, this is used as argument parser helper for --newer-than (-gt) option. Parameters: Name Type Description Default value str Free-format string which is meant to contain user-supplied version required Exceptions: Type Description argparse.ArgumentTypeError Exception in case version was not found in the input string Returns: Type Description Version Parsed version object Source code in lastversion/lastversion.py def check_version ( value ): \"\"\"Given a version string, raises argparse.ArgumentTypeError if it does not contain any version. In lastversion CLI app, this is used as argument parser helper for --newer-than (-gt) option. Args: value (str): Free-format string which is meant to contain user-supplied version Raises: argparse.ArgumentTypeError: Exception in case version was not found in the input string Returns: Version: Parsed version object \"\"\" \"\"\" Argument parser helper for --newer-than (-gt) option :param value: :type value: :return: :rtype: \"\"\" try : # TODO use sanitize_version so that we can just pass tags as values # help devel releases to be correctly identified # https://www.python.org/dev/peps/pep-0440/#developmental-releases value = re . sub ( '-devel$' , '.dev0' , value , 1 ) # help post (patch) releases to be correctly identified (e.g. Magento 2.3.4-p2) value = re . sub ( '-p( \\\\ d+)$' , '.post \\\\ 1' , value , 1 ) value = Version ( value ) except InvalidVersion : raise argparse . ArgumentTypeError ( \" %s is an invalid version value\" % value ) return value","title":"check_version()"},{"location":"reference/lastversion/#lastversion.lastversion.has_update","text":"Given an existing version for a repo, checks if there is an update. Parameters: Name Type Description Default repo str Repository specifier in any form. required current_version str A version you want to check update for. required pre_ok bool Specifies whether pre-releases can be accepted as newer version. False at str Specifies repo hosting more precisely, only useful if repo argument was specified as one word. None Returns: Type Description Version Newer version as object, if found. Otherwise, False Source code in lastversion/lastversion.py def has_update ( repo , current_version , pre_ok = False , at = None ): \"\"\"Given an existing version for a repo, checks if there is an update. Args: repo (str): Repository specifier in any form. current_version (str): A version you want to check update for. pre_ok (bool): Specifies whether pre-releases can be accepted as newer version. at (str): Specifies repo hosting more precisely, only useful if repo argument was specified as one word. Returns: Version: Newer version as object, if found. Otherwise, False \"\"\" latest_version = latest ( repo , output_format = 'version' , pre_ok = pre_ok , at = at ) if latest_version and latest_version > Version ( current_version ): return latest_version return False","title":"has_update()"},{"location":"reference/lastversion/#lastversion.lastversion.install_app_image","text":"Install an AppImage from a URL to ~/Applications/<install_name> Parameters: Name Type Description Default url str URL where AppImage file is hosted required install_name str Short name that the AppImage will be renamed to required Source code in lastversion/lastversion.py def install_app_image ( url , install_name ): \"\"\"Install an AppImage from a URL to `~/Applications/<install_name>` Args: url (str): URL where AppImage file is hosted install_name (str): Short name that the AppImage will be renamed to \"\"\" home_dir = os . path . expanduser ( '~' ) apps_dir = os . path . join ( home_dir , 'Applications' ) app_file_name = os . path . join ( apps_dir , install_name ) Path ( apps_dir ) . mkdir ( exist_ok = True , parents = True ) download_file ( url , app_file_name ) os . chmod ( app_file_name , 0o755 ) # skipcq: BAN-B103 extract_appimage_desktop_file ( app_file_name )","title":"install_app_image()"},{"location":"reference/lastversion/#lastversion.lastversion.latest","text":"Find the latest release version for a project. Parameters: Name Type Description Default major str Only consider versions which are \"descendants\" of this major version string None short_urls bool Whether we should try to return shorter URLs for release data False assets_filter Union[str, Pattern] Regular expression for filtering assets for the latest release None only str Only consider tags with this text. Useful for repos with multiple projects. The argument supports negation and regular expressions. To indicate a regex, start it with tilde sign, to negate the expression, start it with exclamation point. See Examples . None repo str Repository specifier in any form. required output_format str Affects the return format. Possible values version , json , dict , assets , source , tag . 'version' pre_ok bool Specifies whether pre-releases can be accepted as a newer version. False at str Specifies repo hosting more precisely, only useful if repo argument was specified as one word. None having_asset Union[str, bool] Only consider releases with the given asset. Pass True for any asset None exclude str Only consider releases NOT containing this text/regular expression. None even bool Consider as stable only releases with even minor component, e.g. 1.2.3 False Examples: Find the latest version of Mautic, it is OK to consider betas. >>> latest ( \"mautic/mautic\" , output_format = 'version' , pre_ok = True ) < Version ( '4.4.4' ) > Consider only tags without letters: >>> latest ( \"openssl/openssl\" , output_format = 'version' , only = r '!~\\w' ) < Version ( '3.0.7' ) > Returns: Type Description Union[Version, dict] Newer version object, if found and output_format is version . Returns: Type Description str Single string containing tag, if found and output_format is tag Source code in lastversion/lastversion.py def latest ( repo , output_format = 'version' , pre_ok = False , assets_filter = None , short_urls = False , major = None , only = None , at = None , having_asset = None , exclude = None , even = False ): r \"\"\"Find the latest release version for a project. Args: major (str): Only consider versions which are \"descendants\" of this major version string short_urls (bool): Whether we should try to return shorter URLs for release data assets_filter (Union[str, Pattern]): Regular expression for filtering assets for the latest release only (str): Only consider tags with this text. Useful for repos with multiple projects. The argument supports negation and regular expressions. To indicate a regex, start it with tilde sign, to negate the expression, start it with exclamation point. See ``Examples``. repo (str): Repository specifier in any form. output_format (str): Affects the return format. Possible values `version`, `json`, `dict`, `assets`, `source`, `tag`. pre_ok (bool): Specifies whether pre-releases can be accepted as a newer version. at (str): Specifies repo hosting more precisely, only useful if repo argument was specified as one word. having_asset (Union[str, bool]): Only consider releases with the given asset. Pass `True` for any asset exclude (str): Only consider releases NOT containing this text/regular expression. even (bool): Consider as stable only releases with even minor component, e.g. 1.2.3 Examples: Find the latest version of Mautic, it is OK to consider betas. >>> latest(\"mautic/mautic\", output_format='version', pre_ok=True) <Version('4.4.4')> Consider only tags without letters: >>> latest(\"openssl/openssl\", output_format='version', only=r'!~\\w') <Version('3.0.7')> Returns: Union[Version, dict]: Newer version object, if found and `output_format` is `version`. Returns: str: Single string containing tag, if found and `output_format` is `tag` \"\"\" repo_data = {} if repo . endswith ( '.yml' ) and not repo . startswith (( 'http://' , 'https://' )): with open ( repo ) as fpi : repo_data = yaml . safe_load ( fpi ) if 'repo' in repo_data : if 'nginx-extras' in repo : repo_data [ 'module_of' ] = 'nginx' name = os . path . splitext ( os . path . basename ( repo ))[ 0 ] if 'module_of' in repo_data : name = ' {} -module- {} ' . format ( repo_data [ 'module_of' ], name ) repo = repo_data [ 'repo' ] repo_data [ 'name' ] = name if repo . startswith (( 'http://' , 'https://' )) and repo . endswith ( 'Chart.yaml' ): at = 'helm_chart' if repo . endswith ( '.spec' ): # repo is specified inside the .spec file # GitHub repo is resolved via %{upstream_github} + %{name}/%{upstream_name} # no upstream_github global means that the spec was not prepared for lastversion # optional: use of spec_tag macros if the source is from GitHub. in edge cases we check # new version via GitHub, but prepared sources are elsewhere with open ( repo ) as f : name = None upstream_github = None upstream_name = None current_version = None spec_repo = None spec_url = None for line in f . readlines (): if line . startswith ( ' %g lobal lastversion_repo' ): spec_repo = line . split ( ' ' )[ 2 ] . strip () elif line . startswith ( ' %g lobal upstream_github' ): upstream_github = line . split ( ' ' )[ 2 ] . strip () elif line . startswith ( ' %g lobal upstream_name' ): upstream_name = line . split ( ' ' )[ 2 ] . strip () elif line . startswith ( 'Name:' ): name = line . split ( 'Name:' )[ 1 ] . strip () elif line . startswith ( 'URL:' ): spec_url = line . split ( 'URL:' )[ 1 ] . strip () elif line . startswith ( ' %g lobal upstream_version ' ): current_version = line . split ( ' ' )[ 2 ] . strip () # influences %spec_tag to use %upstream_version instead of %version repo_data [ 'module_of' ] = True elif line . startswith ( 'Version:' ) and not current_version : current_version = line . split ( 'Version:' )[ 1 ] . strip () if spec_url : spec_host = urlparse ( spec_url ) . hostname if spec_host in [ 'github.com' ] and not upstream_github and not spec_repo : log . warning ( 'Neither %u pstream_github nor %la stversion_repo macros were found. ' 'Please prepare your spec file using instructions: ' 'https://lastversion.getpagespeed.com/spec-preparing.html' ) if not current_version : log . critical ( 'Did not find neither Version: nor %u pstream_version in the spec file' ) sys . exit ( 1 ) try : if current_version != 'x' : repo_data [ 'current_version' ] = Version ( current_version ) except InvalidVersion : log . critical ( 'Failed to parse current version in %s . Tried %s ' , repo , current_version ) sys . exit ( 1 ) if upstream_name : repo_data [ 'name' ] = upstream_name repo_data [ 'spec_name' ] = '% {upstream_name} ' else : repo_data [ 'name' ] = name repo_data [ 'spec_name' ] = '% {name} ' if upstream_github : repo = \" {} / {} \" . format ( upstream_github , repo_data [ 'name' ]) log . info ( 'Discovered GitHub repo %s from .spec file' , repo ) elif spec_repo : repo = spec_repo log . info ( 'Discovered explicit repo %s from .spec file' , repo ) elif spec_url : repo = spec_url with HolderFactory . get_instance_for_repo ( repo , at = at ) as project : project . set_only ( only ) project . set_exclude ( exclude ) project . set_having_asset ( having_asset ) project . set_even ( even ) release = project . get_latest ( pre_ok = pre_ok , major = major ) # bail out, found nothing that looks like a release if not release : return None from_type = 'Located the latest release tag {} at: {} ' . format ( release [ 'tag_name' ], project . get_canonical_link () ) if 'type' in release : from_type = ' {} via {} mechanism' . format ( from_type , release [ 'type' ]) log . info ( from_type ) version = release [ 'version' ] tag = release [ 'tag_name' ] # return the release if we've reached far enough: if output_format == 'version' : return version if output_format in [ 'json' , 'dict' ]: if output_format == 'dict' : release [ 'version' ] = version else : release [ 'version' ] = str ( version ) if 'tag_date' in release : release [ 'tag_date' ] = str ( release [ 'tag_date' ]) release [ 'v_prefix' ] = tag . startswith ( \"v\" ) version_macro = 'upstream_version' if 'module_of' in repo_data else 'version' version_macro = '%{{ {} }}' . format ( version_macro ) holder_i = { value : key for key , value in HolderFactory . HOLDERS . items ()} release [ 'source' ] = holder_i [ type ( project )] release [ 'spec_tag' ] = tag . replace ( str ( version ), version_macro ) # spec_tag_no_prefix is the helpful macro which will allow us to know where tarball # extracts to (GitHub-specific) if release [ 'spec_tag' ] . startswith ( 'v {} ' . format ( version_macro )) or \\ re . match ( r '^v\\d' , release [ 'spec_tag' ]): release [ 'spec_tag_no_prefix' ] = release [ 'spec_tag' ] . lstrip ( 'v' ) else : release [ 'spec_tag_no_prefix' ] = release [ 'spec_tag' ] release [ 'tag_name' ] = tag if hasattr ( project , 'repo_license' ): release [ 'license' ] = project . repo_license ( tag ) if hasattr ( project , 'repo_readme' ): release [ 'readme' ] = project . repo_readme ( tag ) release . update ( repo_data ) try : release [ 'assets' ] = project . get_assets ( release , short_urls , assets_filter ) except NotImplementedError : pass release [ 'from' ] = project . get_canonical_link () if 'license' in release and release [ 'license' ]: spdx_id = release [ 'license' ][ 'license' ][ 'spdx_id' ] rpmspec_licence = rpmspec_licenses [ spdx_id ] if spdx_id in rpmspec_licenses else None if rpmspec_licence : release [ 'rpmspec_license' ] = rpmspec_licence return release if output_format == 'assets' : return project . get_assets ( release , short_urls , assets_filter ) if output_format == 'source' : return project . release_download_url ( release , short_urls ) if output_format == 'tag' : return tag return None","title":"latest()"},{"location":"reference/lastversion/#lastversion.lastversion.main","text":"The entrypoint to CLI app. Source code in lastversion/lastversion.py def main (): \"\"\"The entrypoint to CLI app.\"\"\" epilog = None if \"GITHUB_API_TOKEN\" not in os . environ and \"GITHUB_TOKEN\" not in os . environ : epilog = TOKEN_PRO_TIP parser = argparse . ArgumentParser ( description = 'Find the latest software release.' , epilog = epilog , prog = 'lastversion' ) parser . add_argument ( 'action' , nargs = '?' , default = 'get' , help = 'Action to run. Default: get' , choices = [ 'get' , 'download' , 'extract' , 'unzip' , 'test' , 'format' , 'install' , 'update-spec' ]) parser . add_argument ( 'repo' , metavar = '<repo URL or string>' , help = 'Repository in format owner/name or any URL that belongs to it, or a version string' ) # affects what is considered last release parser . add_argument ( '--pre' , dest = 'pre' , action = 'store_true' , help = 'Include pre-releases in potential versions' ) parser . add_argument ( '--sem' , dest = 'sem' , choices = [ 'major' , 'minor' , 'patch' , 'any' ], help = 'Semantic versioning level base to print or compare against' ) parser . add_argument ( '-v' , '--verbose' , action = 'count' , default = 0 , help = 'Will give you an idea of what is happening under the hood, ' '-vv to increase verbosity level' ) # no --download = False, --download filename.tar, --download = None parser . add_argument ( '-d' , '-o' , '--download' , '--output' , dest = 'download' , nargs = '?' , default = False , const = None , metavar = 'FILENAME' , help = 'Download with custom filename' ) # how / which data of last release we want to present # assets will give download urls for assets if available and sources archive otherwise # sources will give download urls for sources always # json always includes \"version\", \"tag_name\" etc. + whichever json data was # used to satisfy lastversion parser . add_argument ( '--format' , choices = [ 'version' , 'assets' , 'source' , 'json' , 'tag' ], help = 'Output format' ) parser . add_argument ( '--assets' , dest = 'assets' , action = 'store_true' , help = 'Returns assets download URLs for last release' ) parser . add_argument ( '--source' , dest = 'source' , action = 'store_true' , help = 'Returns only source URL for last release' ) parser . add_argument ( '-gt' , '--newer-than' , type = check_version , metavar = 'VER' , help = \"Output only if last version is newer than given version\" ) parser . add_argument ( '-b' , '--major' , '--branch' , metavar = 'MAJOR' , help = \"Only consider releases of a specific major \" \"version, e.g. 2.1.x\" ) parser . add_argument ( '--only' , metavar = 'REGEX' , help = \"Only consider releases containing this text. \" \"Useful for repos with multiple projects inside\" ) parser . add_argument ( '--exclude' , metavar = 'REGEX' , help = \"Only consider releases NOT containing this text. \" \"Useful for repos with multiple projects inside\" ) parser . add_argument ( '--filter' , metavar = 'REGEX' , help = \"Filters --assets result by a regular \" \"expression\" ) parser . add_argument ( '--having-asset' , metavar = 'ASSET' , help = \"Only consider releases with this asset\" , nargs = '?' , const = True ) parser . add_argument ( '-su' , '--shorter-urls' , dest = 'shorter_urls' , action = 'store_true' , help = 'A tiny bit shorter URLs produced' ) parser . add_argument ( '--even' , dest = 'even' , action = 'store_true' , help = 'Only even versions like 1.[2].x, or 3.[6].x are considered as stable' ) parser . add_argument ( '--at' , dest = 'at' , help = 'If the repo argument is one word, specifies where to look up the ' 'project. The default is via internal lookup or GitHub Search' , choices = HolderFactory . HOLDERS . keys ()) parser . add_argument ( '-y' , '--assumeyes' , dest = 'assumeyes' , action = 'store_true' , help = 'Automatically answer yes for all questions' ) parser . add_argument ( '--version' , action = VersionAction ) parser . set_defaults ( validate = True , verbose = False , format = 'version' , pre = False , assets = False , newer_than = False , filter = False , shorter_urls = False , major = None , assumeyes = False , at = None , having_asset = None , even = False ) args = parser . parse_args () if args . repo == \"self\" : args . repo = __self__ # \"expand\" repo:1.2 as repo --branch 1.2 if ':' in args . repo and \\ not ( args . repo . startswith (( 'https://' , 'http://' )) and args . repo . count ( ':' ) == 1 ): # right split ':' once only to preserve it in protocol of URLs # https://github.com/repo/owner:2.1 repo_args = args . repo . rsplit ( ':' , 1 ) args . repo = repo_args [ 0 ] args . major = repo_args [ 1 ] # instead of using root logger, we use logger = logging . getLogger ( 'lastversion' ) # create console handler and set level to debug ch = logging . StreamHandler () # create formatter fmt = ' %(name)s - %(levelname)s - %(message)s ' if args . verbose else ' %(levelname)s : %(message)s ' formatter = logging . Formatter ( fmt ) # add formatter to ch ch . setFormatter ( formatter ) # add ch to logger logger . addHandler ( ch ) if args . verbose : logger . setLevel ( logging . DEBUG ) log . info ( \"Verbose %s level output.\" , args . verbose ) if args . verbose >= 2 : cachecontrol_logger = logging . getLogger ( 'cachecontrol' ) cachecontrol_logger . removeHandler ( logging . NullHandler ()) cachecontrol_logger . addHandler ( ch ) cachecontrol_logger . setLevel ( logging . DEBUG ) if args . assets : args . format = 'assets' if args . source : args . format = 'source' if args . filter : args . filter = re . compile ( args . filter ) if args . action in [ 'test' , 'format' ]: v = parse_version ( args . repo ) if not v : log . critical ( 'Failed to parse as a valid version' ) sys . exit ( 1 ) else : # extract the desired print base v = v . sem_extract_base ( args . sem ) if args . action == 'test' : print ( \"Parsed as: {} \" . format ( v )) print ( \"Stable: {} \" . format ( not v . is_prerelease )) else : print ( v ) sys . exit ( 0 ) if args . action == 'install' : # we can only install assets args . format = 'json' if args . having_asset is None : args . having_asset = r '~\\.(AppImage|rpm)$' try : import apt args . having_asset = r '~\\.(AppImage|deb)$' except ImportError : pass if args . repo . endswith ( '.spec' ): args . action = 'update-spec' args . format = 'dict' if not args . sem : if args . action == 'update-spec' : args . sem = 'minor' else : args . sem = 'any' # imply source download, unless --assets specified # --download is legacy flag to specify download action or name of desired download file # --download == None indicates download intent where filename is based on upstream if args . action == 'download' and args . download is False : args . download = None if args . download is not False : args . action = 'download' if args . format != 'assets' : args . format = 'source' if args . action in [ 'extract' , 'unzip' ] and args . format != 'assets' : args . format = 'source' if args . newer_than : base_compare = parse_version ( args . repo ) if base_compare : print ( max ([ args . newer_than , base_compare ])) sys . exit ( 2 if base_compare <= args . newer_than else 0 ) # other action are either getting release or doing something with release (extend get action) try : res = latest ( args . repo , args . format , args . pre , args . filter , args . shorter_urls , args . major , args . only , args . at , having_asset = args . having_asset , exclude = args . exclude , even = args . even ) except ( ApiCredentialsError , BadProjectError ) as error : log . critical ( str ( error )) if isinstance ( error , ApiCredentialsError ) and \"GITHUB_API_TOKEN\" not in os . environ and \\ \"GITHUB_TOKEN\" not in os . environ : log . critical ( TOKEN_PRO_TIP ) sys . exit ( 4 ) if res : if args . action == 'update-spec' : return update_spec ( args . repo , res , sem = args . sem ) if args . action == 'download' : # download command if args . format == 'source' : # there is only one source, but we need an array res = [ res ] download_name = None # save with custom filename, if there's one file to download if len ( res ) == 1 : download_name = args . download for url in res : log . info ( \"Downloading %s ...\" , url ) download_file ( url , download_name ) sys . exit ( 0 ) if args . action in [ 'unzip' , 'extract' ]: # download command if args . format == 'source' : # there is only one source, but we need an array res = [ res ] for url in res : log . info ( \"Extracting %s ...\" , url ) extract_file ( url ) sys . exit ( 0 ) if args . action == 'install' : app_images = [ asset for asset in res [ 'assets' ] if asset . endswith ( '.AppImage' )] if app_images : return install_app_image ( app_images [ 0 ], install_name = args . repo ) rpms = [ asset for asset in res [ 'assets' ] if asset . endswith ( '.rpm' )] if not rpms : log . error ( 'No assets found to install' ) sys . exit ( 1 ) # prevents downloading large packages if we already have newest installed # consult RPM database for current version installed_version = rpm_installed_version ( args . repo ) if installed_version is False : log . warning ( 'Please install lastversion using YUM or DNF so it can check current ' 'program version. This is helpful to prevent unnecessary downloads' ) if installed_version and Version ( installed_version ) >= Version ( res [ 'version' ]): log . warning ( 'Newest version {} is already installed' . format ( installed_version )) sys . exit ( 0 ) # pass RPM URLs directly to package management program try : import subprocess params = [ 'yum' , 'install' ] params . extend ( rpms ) if args . assumeyes : params . append ( '-y' ) subprocess . call ( params ) except OSError : log . critical ( 'Failed to launch package manager. Only YUM/DNF is supported!' ) sys . exit ( 1 ) # if the system has yum, then lastversion has to be installed from yum and # has access to system packages like yum python or dnf python API # if install_with_dnf(rpms) is False or install_with_yum(rpms) is False: # log.error('Failed talking to either DNF or YUM for package install') # sys.exit(1) sys . exit ( 0 ) # display version in various formats: if args . format == 'assets' : print ( \" \\n \" . join ( res )) elif args . format == 'json' : json . dump ( res , sys . stdout ) else : # result may be a tag str, not just Version if isinstance ( res , Version ): res = res . sem_extract_base ( args . sem ) print ( res ) # special exit code \"2\" is useful for scripting to detect if no newer release exists if args . newer_than : # set up same SEM base args . newer_than = args . newer_than . sem_extract_base ( args . sem ) if res <= args . newer_than : sys . exit ( 2 ) else : # empty list returned to --assets, emit 3 if args . format == 'assets' and res is not False : sys . exit ( 3 ) log . critical ( \"No release was found\" ) sys . exit ( 1 )","title":"main()"},{"location":"reference/lastversion/#lastversion.lastversion.parse_version","text":"Parse version to Version object. Source code in lastversion/lastversion.py def parse_version ( tag ): \"\"\"Parse version to Version object.\"\"\" h = ProjectHolder () return h . sanitize_version ( tag , pre_ok = True )","title":"parse_version()"}]}